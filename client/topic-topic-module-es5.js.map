{"version":3,"sources":["webpack:///src/app/teacher/topic/topics/topics.component.ts","webpack:///src/app/teacher/topic/topics/topics.component.html","webpack:///src/app/teacher/topic/add-question/add-question.component.ts","webpack:///src/app/teacher/topic/add-question/add-question.component.html","webpack:///src/app/teacher/topic/topic-edit/topic-edit.component.ts","webpack:///src/app/teacher/topic/topic-edit/topic-edit.component.html","webpack:///src/app/teacher/topic/topic.module.ts","webpack:///src/app/teacher/topic/topic-routing.module.ts","webpack:///src/app/teacher/topic/topic-details/topic-details.component.ts","webpack:///src/app/teacher/topic/topic-details/topic-details.component.html","webpack:///src/app/teacher/services/question.service.ts","webpack:///src/app/teacher/topic/question-details/question-details.component.ts","webpack:///src/app/teacher/topic/question-details/question-details.component.html","webpack:///src/app/teacher/topic/add-topic/add-topic.component.ts","webpack:///src/app/teacher/topic/add-topic/add-topic.component.html","webpack:///src/app/teacher/services/question-type.service.ts"],"names":["$event","stopPropagation","TopicsComponent","route","subjectService","topicService","refreshedTopics$","subjectId","snapshot","paramMap","get","subject$","getSubject","topics$","pipe","_","getSubjectTopics","next","topicId","deleteTopic","subscribe","refreshTopics","AddQuestionComponent","fb","questionService","questionTypeService","questionForm","createForm","newQuestionEvent","questionTypes$","getQuestionTypes","group","title","required","type","maxPoints","choices","array","controls","text","isCorrect","length","push","createChoice","index","removeAt","question","formValue","value","questionType","removeControl","invalid","atLeastOneRightChoice","some","choice","createQuestion","emit","submitQuestion","TopicEditComponent","router","topicEditForm","name","getTopic","topic","patchValue","editTopic","navigate","submit","TopicModule","routes","path","children","component","pathMatch","TopicRoutingModule","forChild","TopicDetailsComponent","showQuestionDetails","topic$","questions$","getTopicQuestions","questionId","getQuestion","selectedQuestion","deleteQuestion","refreshQuestions","QuestionService","http","baseUrl","API_ENDPOINT","post","QuestionDetailsComponent","closeQuestionDetailsEvent","deleteQuestionEvent","closeQuestionDetails","AddTopicComponent","topicForm","createTopic","QuestionTypeService"],"mappings":"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","file":"topic-topic-module-es5.js","sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { switchMap, take } from 'rxjs/operators';\nimport { Subject, Topic } from 'src/app/core/models';\nimport { SubjectService } from '../../services/subject.service';\nimport { TopicService } from '../../services/topic.service';\n\n@Component({\n  selector: 'app-topics',\n  templateUrl: './topics.component.html',\n  styleUrls: ['./topics.component.css']\n})\nexport class TopicsComponent implements OnInit {\n\n  public subject$!: Observable<Subject>;\n  public topics$!: Observable<Array<Topic>>;\n  public refreshedTopics$ = new BehaviorSubject<boolean>(true);\n  public subjectId: string | null;\n\n  constructor\n    (\n      private readonly route: ActivatedRoute,\n      private readonly subjectService: SubjectService,\n      private readonly topicService: TopicService\n  ) {\n    this.subjectId = this.route.snapshot.paramMap.get('subject-id');\n  }\n\n  public ngOnInit(): void {\n    this.subject$ = this.subjectService.getSubject(this.subjectId);\n    this.topics$ = this.refreshedTopics$.pipe(switchMap(_ => this.subjectService.getSubjectTopics(this.subjectId)));\n  }\n\n  public refreshTopics() {\n    this.refreshedTopics$.next(true);\n  }\n\n  public deleteTopic(topicId: number): void {\n    this.topicService.deleteTopic(topicId)\n      .pipe(take(1))\n      .subscribe(() => {\n        this.refreshTopics();\n      })\n  }\n}\n","<ng-container *ngIf=\"subject$ | async as subject\">\n\n    <div class=\"page-wrapper\">\n        <nav class=\"navbar\">\n            <div class=\"heading-nav\">\n                <h2 id=\"heading\">{{ subject.name | uppercase }}</h2>\n            </div>\n\n        </nav>\n\n        <main class=\"page\">\n\n            <h2>Topics</h2>\n\n            <div class=\"rectangle-flex-container\">\n                <div class=\"rectangle-flex-item hover box-shadow\" id=\"add-topic\" routerLink=\"add\">\n                    <div class=\"rectangle-content\">\n                        <h3>\n                            <i class=\"fas fa-plus\"></i>\n                        </h3>\n                    </div>\n                </div>\n\n                <div class=\"rectangle-flex-item hover box-shadow\" *ngFor=\"let topic of topics$ | async\"\n                    routerLink=\"{{topic.id}}\">\n                    <div class=\"rectangle-content\">\n                        <h3>\n                            {{ topic.name }}\n                        </h3>\n                    </div>\n                    <div class=\"edit-strip\" routerLink=\"{{topic.id}}/edit\">\n                        <p>Edit</p>\n                    </div>\n                    <div class=\"delete-strip\" (click)=\"deleteTopic(topic.id); $event.stopPropagation();\">\n                        <p>Delete</p>\n                    </div>\n                </div>\n            </div>\n\n        </main>\n    </div>\n</ng-container>","import { Component, EventEmitter, OnInit, Output } from '@angular/core';\nimport { AbstractControl, FormArray, FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { take } from 'rxjs/operators';\nimport { QuestionType } from 'src/app/core/models';\nimport { QuestionTypeService } from '../../services/question-type.service';\nimport { QuestionService } from '../../services/question.service';\n\n@Component({\n  selector: 'app-add-question',\n  templateUrl: './add-question.component.html',\n  styleUrls: ['./add-question.component.css']\n})\nexport class AddQuestionComponent implements OnInit{\n  public questionForm: FormGroup = this.createForm();\n  public topicId: string | null;\n  public questionTypes$!: Observable<Array<QuestionType>>;\n  @Output() public newQuestionEvent = new EventEmitter<void>();\n\n  constructor\n  (\n    private readonly route: ActivatedRoute,\n    private readonly fb: FormBuilder,\n    private readonly questionService: QuestionService,\n    private readonly questionTypeService: QuestionTypeService\n  ) { \n    this.topicId = this.route.snapshot.paramMap.get('topic-id');\n  }\n\n  ngOnInit() {\n    this.questionTypes$ = this.questionTypeService.getQuestionTypes();\n  }\n\n  public createForm(): FormGroup {\n    return this.fb.group({\n      title: ['', [Validators.required]],\n      type: ['', [Validators.required]],\n      maxPoints: ['', [Validators.required]],\n      choices: this.fb.array([])\n    });\n  }\n\n  get choicesControls(): Array<AbstractControl> {\n    return (this.questionForm.get(\"choices\") as FormArray).controls;\n  }\n\n  public choices(): FormArray {\n    return (this.questionForm.get(\"choices\") as FormArray)\n  }\n\n  public createChoice(): FormGroup {\n    return this.fb.group({\n      text: ['', [Validators.required]],\n      isCorrect: [false]\n    })\n  }\n  \n  public addChoice(): void {\n    if(this.choices().length >= 5) {\n      return;\n    }\n    this.choices().push(this.createChoice());\n  }\n\n  public removeChoice(index: number) {\n    this.choices().removeAt(index);\n  }\n\n  public submitQuestion(): void {\n    /*\n    1. A closed question must have at least 2 choices.\n    2. A closed question must have at least 1 correct choice.\n    */\n    let question = {};\n    const formValue = this.questionForm.value;\n    const questionType = formValue.type;\n\n    if(questionType === 'open') {\n      this.questionForm.removeControl('choices');\n    }\n\n    if(this.questionForm.invalid) {\n        return;\n    }\n\n    if(questionType === 'open') {\n      const { title, type, maxPoints } = formValue;\n      question = { title, type, topicId: this.topicId, maxPoints }\n\n    } else if (questionType === 'closed') {   \n      const { title, type, choices, maxPoints } = formValue;\n      const atLeastOneRightChoice = choices.some((choice: any) => choice.isCorrect === true);\n\n      if(choices.length < 2) {\n        return;\n      } else if (!atLeastOneRightChoice) {\n        return;\n      }\n\n      question = { title, type, topicId: this.topicId, choices, maxPoints};\n    }\n    // return; \n\n    this.questionService.createQuestion(question)\n    .pipe(take(1))\n    .subscribe(() => {\n      //inform parent that a question is created and refresh questions\n      this.newQuestionEvent.emit();\n      //refresh questionForm\n      this.questionForm = this.createForm();\n    });\n  }\n\n}\n","<form [formGroup]=\"questionForm\">\n    <h4>Question type</h4>\n\n    <div id=\"types\">\n        <div class=\"hover\" *ngFor=\"let questionType of questionTypes$ | async\">\n            <input type=\"radio\" name=\"type\" formControlName=\"type\" value=\"{{questionType.type}}\">\n            <label for=\"open-type\">{{questionType.type}}</label>\n        </div>\n    </div>\n\n    <ng-container *ngIf=\"questionForm.value.type != '' \">\n        <input placeholder=\"Question's title\" formControlName=\"title\" class=\"blue-input\">\n\n        <input placeholder=\"Points for correct answer/s\" formControlName=\"maxPoints\" class=\"blue-input\">\n    </ng-container>\n\n    <div id=\"choices-list\" *ngIf=\"questionForm.value.type === 'closed'\">\n        <button id=\"add-choice\" class=\"hover white-button\" (click)=\"addChoice()\">Add choice</button>\n        <p>Mark the checkbox of the choices that are correct</p>\n\n        <div formArrayName=\"choices\" *ngFor=\"let choice of choicesControls; let i = index\">\n            <div [formGroupName]=\"i\">\n                <input type=\"checkbox\" formControlName=\"isCorrect\" class=\"hover checkbox\">\n                <input formControlName=\"text\" placeholder=\"Choice &#8470;{{i + 1}}\" class=\"blue-input choice\">\n                <button (click)=\"removeChoice(i)\" class=\"hover remove-btn\">Remove</button>\n            </div>\n        </div>\n    </div>\n\n    <button class=\"hover form-blue-button submit-button\" (click)=\"submitQuestion()\">\n        Add question\n    </button>\n</form>","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { take } from 'rxjs/operators';\nimport { TopicService } from '../../services/topic.service';\n\n@Component({\n  selector: 'app-topic-edit',\n  templateUrl: './topic-edit.component.html',\n  styleUrls: ['./topic-edit.component.css']\n})\nexport class TopicEditComponent implements OnInit {\n\n  public subjectId: string | null;\n  public topicId: string | null;\n  public topicEditForm = this.fb.group({\n    name: ['', [Validators.required]]\n  });\n\n  constructor(\n    private readonly fb: FormBuilder,\n    private readonly route: ActivatedRoute,\n    private readonly router: Router,\n    private readonly topicService: TopicService\n  ) { \n    this.subjectId = this.route.snapshot.paramMap.get('subject-id');\n    this.topicId = this.route.snapshot.paramMap.get('topic-id');\n  }\n\n  public ngOnInit(): void {\n    this.topicService.getTopic(this.topicId)\n    .pipe(take(1))\n    .subscribe((topic) => {\n        this.topicEditForm.patchValue({ name: topic.name })\n    });\n  }\n\n  public submit(): void {\n    const { name } = this.topicEditForm.value;\n\n    this.topicService.editTopic(this.topicId, name)\n    .pipe(take(1))\n    .subscribe(() => {\n      this.router.navigate([`/teacher/subjects/${this.subjectId}/topics`]);\n    });\n  }\n\n}\n","<div class=\"form-wrapper\">\n\n    <div class=\"center-form\">\n        <form [formGroup]=\"topicEditForm\" (ngSubmit)=\"submit()\" class=\"form-box\">\n            <h1>Edit topic</h1>\n            <div>\n                <input formControlName=\"name\" type=\"text\" placeholder=\"Name\" class=\"blue-input\">  \n            </div>\n\n            <button class=\"hover form-blue-button bottom-button\" type=\"submit\"\n            [disabled]=\"this.topicEditForm.invalid\">Edit\n            </button>\n        </form>\n    </div>\n</div>","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { AddTopicComponent } from './add-topic/add-topic.component';\nimport { TopicDetailsComponent } from './topic-details/topic-details.component';\nimport { TopicsComponent } from './topics/topics.component';\n\nimport { TopicRoutingModule } from './topic-routing.module';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { AddQuestionComponent } from './add-question/add-question.component';\nimport { QuestionDetailsComponent } from './question-details/question-details.component';\nimport { TopicEditComponent } from './topic-edit/topic-edit.component';\n\n\n@NgModule({\n  declarations: [\n    AddTopicComponent,\n    TopicDetailsComponent,\n    TopicsComponent,\n    AddQuestionComponent,\n    QuestionDetailsComponent,\n    TopicEditComponent\n  ],\n  imports: [\n    CommonModule,\n    TopicRoutingModule,\n    FormsModule,\n    ReactiveFormsModule,\n  ]\n})\nexport class TopicModule { }\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { AddTopicComponent } from './add-topic/add-topic.component';\nimport { TopicDetailsComponent } from './topic-details/topic-details.component';\nimport { TopicEditComponent } from './topic-edit/topic-edit.component';\nimport { TopicsComponent } from './topics/topics.component';\n\nconst routes: Routes = [\n  { path: '', children: [\n    { path: 'add', component: AddTopicComponent },\n    { path: ':topic-id/edit', component: TopicEditComponent },\n    { path: ':topic-id', component: TopicDetailsComponent },\n    { path: '', component: TopicsComponent, pathMatch: 'full'},\n  ]}\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class TopicRoutingModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { shareReplay, take } from 'rxjs/operators';\nimport { Question, Topic } from 'src/app/core/models';\nimport { QuestionService } from '../../services/question.service';\nimport { TopicService } from '../../services/topic.service';\n\n@Component({\n  selector: 'app-topic-details',\n  templateUrl: './topic-details.component.html',\n  styleUrls: ['./topic-details.component.css']\n})\nexport class TopicDetailsComponent implements OnInit {\n  public topic$!: Observable<Topic>;\n  public questions$!: Observable<Array<Question>>;\n  public topicId: string | null;\n  public subjectId: string | null;\n  public selectedQuestion!: Question;\n  public showQuestionDetails: boolean = false;\n\n  constructor\n    (\n      private readonly route: ActivatedRoute,\n      private readonly topicService: TopicService,\n      private readonly questionService: QuestionService,\n    ) {\n    this.subjectId = this.route.snapshot.paramMap.get('subject-id');\n    this.topicId = this.route.snapshot.paramMap.get('topic-id');\n  }\n\n  public ngOnInit(): void {\n    this.topic$ = this.topicService.getTopic(this.topicId);\n    this.questions$ = this.topicService.getTopicQuestions(this.topicId);\n  }\n\n\n  public getQuestion(questionId: number): void {\n    this.questionService.getQuestion(questionId)\n      .pipe(take(1))\n      .subscribe((question) => {\n        this.showQuestionDetails = true;\n        this.selectedQuestion = question;\n      });\n  }\n\n  public refreshQuestions(): void {\n    this.questions$ = this.topicService.getTopicQuestions(this.topicId);\n  }\n\n  public closeQuestionDetails(): void {\n    this.showQuestionDetails = false;\n  }\n\n  public deleteQuestion(questionId: number): void {\n\n    this.questionService.deleteQuestion(questionId)\n      .pipe(take(1))\n      .subscribe(() => {\n        this.refreshQuestions();\n      });\n\n  }\n\n}\n","<ng-container *ngIf=\"topic$ | async as topic\">\n\n    <div class=\"page-wrapper\">\n        <nav class=\"navbar\">\n            <div class=\"heading-nav\">\n                <h2 id=\"heading\">{{ topic.name | uppercase }}</h2>\n            </div>\n        </nav>\n\n        <div class=\"half-flex-container\">\n\n            <div class=\"half-flex-item left\">\n                <h2 class=\"subheading\">Topic questions</h2>\n\n                <ng-container *ngIf=\"(questions$ | async) as questions\">\n                    <ng-container *ngIf=\"questions.length !== 0; else empty\">\n                        <table class=\"info-table\">\n                            <thead>\n                                <tr>\n                                    <th>Title</th>\n                                    <th>Type</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                <tr *ngFor=\"let question of questions\" (click)=\"getQuestion(question.id)\">\n                                    <td data-label=\"Title\">{{question.title}}</td>\n                                    <td data-label=\"Type\">{{question.questionType.type | uppercase}}</td>\n                                </tr>\n                            </tbody>\n                        </table>\n                    </ng-container>\n                </ng-container>\n\n                <ng-template #empty>\n                    <p id=\"empty\">No questions have been added to this topic yet.</p>\n                </ng-template>\n\n            </div>\n\n            <div class=\"half-flex-item right box-shadow\">\n                <app-add-question *ngIf=\"!showQuestionDetails\" (newQuestionEvent)=\"refreshQuestions()\">\n                </app-add-question>\n\n                <app-question-details *ngIf=\"showQuestionDetails\" [question]=\"selectedQuestion\"\n                    (closeQuestionDetailsEvent)=\"closeQuestionDetails()\" (deleteQuestionEvent)=\"deleteQuestion($event)\">\n                </app-question-details>\n            </div>\n\n        </div>\n    </div>\n</ng-container>","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { AppSettings } from 'src/app/core/app-settings';\nimport { Question } from 'src/app/core/models';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class QuestionService {\n  private readonly baseUrl: string = `${AppSettings.API_ENDPOINT}/questions`;\n\n  constructor\n  (\n    private readonly http: HttpClient\n  ) { }\n\n  public createQuestion(question: any): Observable<void> {\n    return this.http.post<void>(`${this.baseUrl}`, question);\n  }\n\n  public getQuestion(questionId: number): Observable<Question> {\n    return this.http.get<Question>(`${this.baseUrl}/${questionId}`);\n  }\n\n  public deleteQuestion(questionId: number): Observable<void> {\n    return this.http.delete<void>(`${this.baseUrl}/${questionId}`);\n  }\n\n}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { Question } from 'src/app/core/models';\n\n@Component({\n  selector: 'app-question-details',\n  templateUrl: './question-details.component.html',\n  styleUrls: ['./question-details.component.css']\n})\nexport class QuestionDetailsComponent  {\n  @Input() public question!: Question;\n  @Output() public closeQuestionDetailsEvent = new EventEmitter<void>();\n  @Output() public deleteQuestionEvent = new EventEmitter<number>();\n  \n  constructor() { }\n\n  public closeQuestionDetails(): void {\n    this.closeQuestionDetailsEvent.emit();\n  }\n\n  public deleteQuestion(questionId: number): void {\n    this.deleteQuestionEvent.emit(questionId);\n    this.closeQuestionDetails();\n  }\n\n}\n","<div class=\"clearfix\">\n    <i class=\"far fa-times-circle hover close-cross\" (click)=\"closeQuestionDetails()\"></i>\n</div>\n\n\n<h3><b>Question title:</b> {{question.title}}</h3>\n<h3><b>Max points:</b> {{question.maxPoints}}</h3>\n\n<ng-container *ngIf=\"question.questionType.type === 'closed'; else openQuestion\">\n    <h3><b>Choices: </b></h3>\n    <p *ngFor=\"let choice of question.choices\">{{choice.text}} <i>({{choice.isCorrect}})</i></p>\n</ng-container>\n\n<ng-template #openQuestion>\n    <p>This is an open question</p>\n</ng-template>\n\n<button class=\"remove-btn hover submit-button\" (click)=\"deleteQuestion(question.id)\">Delete question</button>","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { take } from 'rxjs/operators';\nimport { TopicService } from '../../services/topic.service';\n\n@Component({\n  selector: 'app-add-topic',\n  templateUrl: './add-topic.component.html',\n  styleUrls: ['./add-topic.component.css']\n})\n\nexport class AddTopicComponent implements OnInit {\n  public subjectId!: string | null;\n  public topicForm = this.fb.group({\n    name: ['', [Validators.required]]\n  });\n\n  constructor(\n    private readonly fb: FormBuilder,\n    private readonly route: ActivatedRoute,\n    private readonly router: Router,\n    private readonly topicService: TopicService\n  ) { }\n\n  public ngOnInit(): void {\n    this.subjectId = this.route.snapshot.paramMap.get('subject-id');\n  }\n\n  public submit() {\n    if(this.topicForm.invalid) {\n      return;\n    }\n    \n    const { name } = this.topicForm.value;\n\n    this.topicService.createTopic(name, this.subjectId)\n    .pipe(take(1))\n    .subscribe(() => {\n      this.router.navigate([`/teacher/subjects/${this.subjectId}/topics`]);\n    });\n  }\n\n}\n","<div class=\"form-wrapper\">\n\n    <div class=\"center-form\">\n        <form [formGroup]=\"topicForm\" (ngSubmit)=\"submit()\" class=\"form-box\">\n            <h1>Create topic</h1>\n            <div>\n                <input formControlName=\"name\" type=\"text\" placeholder=\"Name\" class=\"blue-input\">\n            </div>\n\n            <button class=\"hover form-blue-button bottom-button\" type=\"submit\"\n            [disabled]=\"this.topicForm.invalid\">Create\n            </button>\n        </form>\n    </div>\n</div>","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { AppSettings } from 'src/app/core/app-settings';\nimport { QuestionType } from 'src/app/core/models';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class QuestionTypeService {\n  private readonly baseUrl: string = `${AppSettings.API_ENDPOINT}/question-types`;\n  \n  constructor(private readonly http: HttpClient) { }\n\n  public getQuestionTypes(): Observable<Array<QuestionType>> {\n    return this.http.get<Array<QuestionType>>(this.baseUrl);\n  }\n\n}\n"]}