{"version":3,"sources":["webpack:///src/app/student/services/student-choice.service.ts","webpack:///src/app/student/services/student.service.ts","webpack:///src/app/student/student-routing.module.ts","webpack:///src/app/student/student.module.ts","webpack:///src/app/student/subjects/subjects.component.ts","webpack:///src/app/student/subjects/subjects.component.html","webpack:///src/app/student/student-exam-details/student-exam-details.component.ts","webpack:///src/app/student/student-exam-details/student-exam-details.component.html","webpack:///src/app/student/subject-details/subject-details.component.html","webpack:///src/app/student/subject-details/subject-details.component.ts"],"names":["StudentChoiceService","http","baseUrl","API_ENDPOINT","studentExamId","sessionQuestionId","sessionChoiceId","checked","post","StudentService","get","subjectId","routes","path","children","component","pathMatch","StudentRoutingModule","forChild","StudentModule","SubjectsComponent","studentService","authService","router","subjects$","getSubjects","logout","navigate","StudentExamDetailsComponent","studentExamService","studentChoiceService","studentAnswerService","route","snapshot","paramMap","studentExamQuestions$","getStudentExamQuestionsStudent","studentExam$","getStudentExam","event","target","selectChoice","pipe","subscribe","studentAnswerText","value","giveAnswer","SubjectDetailsComponent","subjectService","subject$","getSubject","studentExams$","getSubjectExamsOfStudent"],"mappings":"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","file":"student-student-module-es5.js","sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { AppSettings } from 'src/app/core/app-settings';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class StudentChoiceService {\n  private readonly baseUrl: string = AppSettings.API_ENDPOINT;\n  constructor\n  (\n    private readonly http: HttpClient\n  ) { }\n\n  public selectChoice(\n    studentExamId: number, \n    sessionQuestionId: number, \n    sessionChoiceId: number, \n    checked: boolean\n    ): Observable<void> {\n    return this.http.post<void>(`${this.baseUrl}/student-choices/select-choice`, { \n      studentExamId,\n      sessionQuestionId,\n      sessionChoiceId,\n      checked\n    });\n  }\n\n}\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { AppSettings } from 'src/app/core/app-settings';\nimport { StudentExam, Subject } from 'src/app/core/models';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class StudentService {\n  private readonly baseUrl: string = AppSettings.API_ENDPOINT + '/';\n  constructor\n  (\n    private readonly http: HttpClient\n  ) { }\n\n  getSubjects(): Observable<Array<Subject>> {\n    return this.http.get<any>(`${this.baseUrl}students/subjects`);\n  }\n\n  getSubjectExamsOfStudent(subjectId: any): Observable<Array<StudentExam>> {\n    return this.http.get<any>(`${this.baseUrl}students/subject/${subjectId}/exams`);\n  }\n}\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { SubjectsComponent } from '../student/subjects/subjects.component';\r\nimport { StudentExamDetailsComponent } from './student-exam-details/student-exam-details.component';\r\nimport { SubjectDetailsComponent } from './subject-details/subject-details.component';\r\n\r\nconst routes: Routes = [{\r\n    path: '', children: [\r\n        { path: ':subject-id/student-exams/:student-exam-id', component: StudentExamDetailsComponent },\r\n        { path: ':subject-id', component: SubjectDetailsComponent },\r\n        { path: '', component: SubjectsComponent, pathMatch: 'full' }\r\n    ]\r\n}];\r\n\r\n\r\n@NgModule({\r\n    imports: [RouterModule.forChild(routes)],\r\n    exports: [RouterModule]\r\n})\r\nexport class StudentRoutingModule { }","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { StudentRoutingModule } from './student-routing.module';\nimport { SubjectsComponent } from './subjects/subjects.component';\nimport { SharedModule } from '../shared/shared.module';\nimport { SubjectDetailsComponent } from './subject-details/subject-details.component';\nimport { StudentExamDetailsComponent } from './student-exam-details/student-exam-details.component';\n\n@NgModule({\n  declarations: [SubjectsComponent, SubjectDetailsComponent, StudentExamDetailsComponent],\n  imports: [\n    CommonModule,\n    StudentRoutingModule,\n    SharedModule\n  ]\n})\nexport class StudentModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { Subject } from 'src/app/core/models';\nimport { AuthService } from 'src/app/shared/services/auth.service';\nimport { StudentService } from '../services/student.service';\n\n@Component({\n  selector: 'app-subjects',\n  templateUrl: './subjects.component.html',\n  styleUrls: ['./subjects.component.css']\n})\nexport class SubjectsComponent implements OnInit {\n  public subjects$!: Observable<Array<Subject>>;\n\n  constructor\n  (\n    private readonly studentService: StudentService,\n    private readonly authService: AuthService,\n    private readonly router: Router\n  ) {}\n\n  ngOnInit(): void {\n    this.subjects$ = this.studentService.getSubjects();\n  }\n\n  public logout() {\n    this.authService.logout();\n    this.router.navigate(['/home']);\n  }\n}\n","<div class=\"page-wrapper\">\n    <nav class=\"navbar\">\n        <div class=\"heading-nav\">\n            <h2 class=\"nav-heading\">SUBJECTS</h2>\n            <button class=\"hover white-button log-out-button\" (click)=\"logout()\">Log out</button>\n            <button class=\"hover white-button log-out-button\" routerLink=\"/home\">Home</button>\n        </div>\n    </nav>\n    \n    <main class=\"page\">\n\n        <h3>Your subjects</h3>\n        <app-subject-list [subjects$]=\"subjects$\"></app-subject-list>\n        \n    </main>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { take } from 'rxjs/operators';\nimport { StudentExamService } from 'src/app/teacher/services/student-exam.service';\nimport { StudentAnswerService } from 'src/app/shared/services/student-answer.service';\nimport { StudentChoiceService } from '../services/student-choice.service'\nimport { StudentExam } from 'src/app/core/models';\n\n@Component({\n  selector: 'app-student-exam-details',\n  templateUrl: './student-exam-details.component.html',\n  styleUrls: ['./student-exam-details.component.css']\n})\nexport class StudentExamDetailsComponent implements OnInit {\n  public studentExam$!: Observable<StudentExam>;\n  public studentExamQuestions$!: Observable<any>;\n  public studentExamId!: string | null;\n\n  constructor\n  (\n    private readonly studentExamService: StudentExamService,\n    private readonly studentChoiceService: StudentChoiceService,\n    private readonly studentAnswerService: StudentAnswerService,\n    private readonly route: ActivatedRoute\n  ) { \n    this.studentExamId = this.route.snapshot.paramMap.get('student-exam-id');\n  }\n\n  ngOnInit(): void {\n    this.studentExamQuestions$ = this.studentExamService.getStudentExamQuestionsStudent(this.studentExamId);\n    this.studentExam$ = this.studentExamService.getStudentExam(this.studentExamId);\n  }\n\n  public selectChoice(event: any, studentExamId: number, sessionQuestionId: number, sessionChoiceId: number): void {\n    const checked = event.target.checked;\n    this.studentChoiceService.selectChoice(studentExamId, sessionQuestionId, sessionChoiceId, checked)\n    .pipe(take(1))\n    .subscribe();\n  }\n\n  public giveAnswer(event: any, studentExamId: number, sessionQuestionId: number): void {\n    const studentAnswerText: string = event.target.value;\n    this.studentAnswerService.giveAnswer(studentAnswerText, studentExamId, sessionQuestionId)\n    .pipe(take(1))\n    .subscribe();\n  }\n}\n","<nav class=\"navbar\">\n    <div class=\"heading-nav\">\n        <h2>Student exam details</h2>\n    </div>\n</nav>\n\n<div class=\"page-wrapper\">\n    <main class=\"page\">\n\n        <ng-container *ngIf=\"studentExam$ | async as studentExam\">\n            <div class=\"page-details\">\n                <h3><b>Student:</b> {{studentExam.student.username}}</h3>\n                <h3><b>Faculty number:</b> {{studentExam.student.facultyNumber}}</h3>\n                <h3><b>Start time:</b> {{studentExam.session.startTime | date:'medium'}}</h3>\n                <h3><b>End time:</b> {{studentExam.session.endTime | date:'medium'}}</h3>\n            </div>\n\n            <ul class=\"exam-question-list\">\n                <ng-container\n                    *ngIf=\"(studentExamQuestions$ | async) as studentExamQuestions; else noQuestionsTemplate\">\n                    \n                    <ng-container *ngFor=\"let question of studentExamQuestions; let i = index\">\n\n                        <ng-container *ngIf=\"question.type == 'open'; else closedQuestionTemplate\">\n                            <li class=\"exam-question\">\n                                <div class=\"exam-question-title\">\n                                    <h2>{{i + 1}}. {{question.title}}</h2>\n                                </div>\n                                <h3>({{question.maxPoints}} Points)</h3>\n                                <textarea class=\"exam-textarea\" placeholder=\"Answer here\"\n                                    (keyup)=\"giveAnswer($event, studentExam.id, question.id)\">{{question.studentAnswerText}}</textarea>\n                            </li>\n                        </ng-container>\n\n                        <ng-template #closedQuestionTemplate >\n                            <li class=\"exam-question\">\n                                <div class=\"exam-question-title\">\n                                    <h2>{{i + 1}}. {{question.title}}</h2>\n                                </div>\n                                <h3>({{question.maxPoints}} Points)</h3>\n                                <h3>Correct choices: {{question.numCorrectChoices}}</h3>\n                                <ul class=\"exam-choice-list\">\n                                    <li class=\"exam-choice\" *ngFor=\"let choice of question.choices\">\n                                        <input type=\"checkbox\" [checked]=\"choice.answered\"\n                                            (click)=\"selectChoice($event, studentExam.id, question.id, choice.sessionChoiceId)\">\n                                        <p>{{choice.text}}</p>\n                                    </li>\n                                </ul>\n                            </li>\n                        </ng-template>\n\n                    </ng-container>\n\n                </ng-container>\n            </ul>\n        </ng-container>\n\n        <ng-template #noQuestionsTemplate>\n            <p>You cannot access this student exam because it has not started or had already finished.</p>\n        </ng-template>\n    </main>\n\n</div>","<ng-container *ngIf=\"subject$ | async as subject\">\n\n    <div class=\"page-wrapper\">\n        <nav class=\"navbar\">\n            <div class=\"heading-nav\">\n                <h2 id=\"heading\"> {{ subject.name | uppercase }}</h2>\n            </div>\n        </nav>\n\n        <main class=\"page\">\n            <h2>Sessions</h2>\n            <ng-container *ngIf=\"(studentExams$ | async) as studentExams\">\n                <table class=\"info-table\" *ngIf=\" studentExams.length !== 0; else empty\">\n                    <thead>\n                        <th>Subject</th>\n                        <th>Teacher</th>\n                        <th>Session name</th>\n                        <th>Start</th>\n                        <th>Result</th>\n                        <th>Status</th>\n                    </thead>\n                    <tbody>\n                        <tr *ngFor=\"let studentExam of studentExams\" routerLink=\"student-exams/{{studentExam.id}}\">\n                            <td data-label=\"Subject\">{{studentExam.subjectName}}</td>\n                            <td data-label=\"Teacher\">{{studentExam.teacher}}</td>\n                            <td data-label=\"Session name\">{{studentExam.sessionName}}</td>\n                            <td data-label=\"Start\">{{studentExam.startTime | date:'medium'}}</td>\n\n                            <td data-label=\"Result\" *ngIf=\"studentExam.status === 'closed'\">\n                                {{studentExam.totalEarnedPoints}}/{{studentExam.totalMaxPoints}}</td>\n                            <td data-label=\"Result\" *ngIf=\"studentExam.status !== 'closed'\">N/A</td>\n\n                            <td data-label=\"Status\">{{ studentExam.status | titlecase }}</td>\n                        </tr>\n                    </tbody>\n                </table>\n            </ng-container>\n\n            <ng-template #empty>\n                <p>You don't have any sessions yet.</p>\n            </ng-template>\n\n        </main>\n    </div>\n</ng-container>","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { StudentExam, Subject } from 'src/app/core/models';\nimport { SubjectService } from 'src/app/teacher/services/subject.service';\nimport { StudentService } from '../services/student.service';\n\n@Component({\n  selector: 'app-subject-details',\n  templateUrl: './subject-details.component.html',\n  styleUrls: ['./subject-details.component.css']\n})\nexport class SubjectDetailsComponent implements OnInit {\n  public subjectId: string | null;\n  public studentExams$!: Observable<Array<StudentExam>>;\n  public subject$!: Observable<Subject>;\n\n  constructor\n  (\n    private readonly studentService: StudentService,\n    private readonly route: ActivatedRoute,\n    private readonly subjectService: SubjectService\n  ) { \n    this.subjectId = this.route.snapshot.paramMap.get('subject-id');\n  }\n\n  ngOnInit(): void {\n    this.subject$ = this.subjectService.getSubject(this.subjectId);\n    this.studentExams$ = this.studentService.getSubjectExamsOfStudent(this.subjectId);\n  }\n\n}\n"]}