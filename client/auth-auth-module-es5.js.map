{"version":3,"sources":["webpack:///src/app/auth/auth-routing.module.ts","webpack:///src/app/helpers/match-passwords.validator.ts","webpack:///src/app/auth/student-register/student-register.component.ts","webpack:///src/app/auth/student-register/student-register.component.html","webpack:///src/app/auth/teacher-login/teacher-login.component.ts","webpack:///src/app/auth/teacher-login/teacher-login.component.html","webpack:///src/app/auth/services/auth.service.ts","webpack:///src/app/auth/student-login/student-login.component.ts","webpack:///src/app/auth/student-login/student-login.component.html","webpack:///src/app/auth/auth.module.ts","webpack:///src/app/auth/teacher-register/teacher-register.component.ts","webpack:///src/app/auth/teacher-register/teacher-register.component.html"],"names":["routes","path","children","component","AuthRoutingModule","forChild","MatchPasswords","formGroup","password","get","confirmPassword","errors","passwordMatch","value","setErrors","StudentRegisterComponent","fb","authService","router","registerForm","group","username","required","email","facultyNumber","validator","invalid","studentRegister","pipe","subscribe","navigate","submit","TeacherLoginComponent","loginForm","teacherLogin","data","localStorage","setItem","tokenId","AuthService","http","baseUrl","API_ENDPOINT","post","StudentLoginComponent","studentLogin","AuthModule","TeacherRegisterComponent","teacherRegister"],"mappings":"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","file":"auth-auth-module-es5.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { StudentLoginComponent } from './student-login/student-login.component';\nimport { StudentRegisterComponent } from './student-register/student-register.component';\nimport { TeacherLoginComponent } from './teacher-login/teacher-login.component';\nimport { TeacherRegisterComponent } from './teacher-register/teacher-register.component';\n\nconst routes: Routes = [{\n  path: '', children: [\n    { path: 'teacher-login', component: TeacherLoginComponent },\n    { path: 'teacher-register', component: TeacherRegisterComponent },\n    { path: 'student-login', component: StudentLoginComponent },\n    { path: 'student-register', component: StudentRegisterComponent }\n  ]\n}\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class AuthRoutingModule { }\n","import { AbstractControl } from '@angular/forms';\r\n\r\nexport function MatchPasswords(formGroup: AbstractControl): void {\r\n\r\n    const password = formGroup.get('password');\r\n    const confirmPassword = formGroup.get('confirmPassword');\r\n\r\n    if (confirmPassword?.errors && !confirmPassword.errors.passwordMatch) {\r\n        return;\r\n    }\r\n\r\n    if (password?.value !== confirmPassword?.value) {\r\n        confirmPassword?.setErrors({ passwordMatch: true });\r\n    } else {\r\n        confirmPassword?.setErrors(null);\r\n    }\r\n\r\n}\r\n","import { Component } from '@angular/core';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { take } from 'rxjs/operators';\nimport { MatchPasswords } from 'src/app/helpers/match-passwords.validator';\nimport { AuthService } from '../services/auth.service';\n\n@Component({\n  selector: 'app-student-register',\n  templateUrl: './student-register.component.html',\n  styleUrls: ['./student-register.component.css']\n})\nexport class StudentRegisterComponent {\n\n  public registerForm = this.fb.group({\n    username: ['', [Validators.required]],\n    email: ['', [Validators.required, Validators.email]],\n    facultyNumber: ['', [Validators.required]],\n    password: ['', [Validators.required]],\n    confirmPassword: ['', [Validators.required]]\n  },\n    { validator: MatchPasswords });\n\n  constructor(\n    private readonly fb: FormBuilder,\n    private readonly authService: AuthService,\n    private readonly router: Router\n  ) { }\n\n  public submit(): void {\n    if(this.registerForm.invalid) {\n      return;\n    }\n    \n    const { username, email, facultyNumber, password } = this.registerForm.value;\n\n    this.authService.studentRegister(username, email, facultyNumber, password)\n      .pipe(take(1))\n      .subscribe(() => {\n        this.router.navigate(['/auth/student-login']);\n      });\n  }\n\n}\n","<div class=\"form-wrapper\">\n\n    <div class=\"center-form\">\n        <form [formGroup]=\"registerForm\" class=\"form-box\">\n            <h2>Student sign up</h2>\n            <div>\n                <input formControlName=\"username\" type=\"text\" \n                placeholder=\"Username\" class=\"blue-input\">\n\n                <input formControlName=\"email\" type=\"email\" \n                placeholder=\"Email\" class=\"blue-input\">\n\n                <input formControlName=\"facultyNumber\" type=\"text\" \n                placeholder=\"Faculty number\" class=\"blue-input\">\n\n                <input formControlName=\"password\" type=\"password\" \n                placeholder=\"Password\" class=\"blue-input\">\n\n                <input formControlName=\"confirmPassword\" type=\"password\" \n                placeholder=\"Confirm password\" class=\"blue-input\">\n            </div>\n            <button class=\"hover form-blue-button auth-bottom-button\" type=\"submit\"\n            [disabled]=\"this.registerForm.invalid\" (click)=\"submit()\">\n                Sign up\n            </button>\n        </form>\n\n        <p class=\"form-bottom-text\">Already have a student account? <span class=\"hover\"\n                routerLink=\"/auth/student-login\">\n                <b>Sign in.</b>\n            </span></p>\n    </div>\n</div>","import { Component } from '@angular/core';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { take } from 'rxjs/operators';\nimport { AuthService } from '../services/auth.service';\n\n@Component({\n  selector: 'app-teacher-login',\n  templateUrl: './teacher-login.component.html',\n  styleUrls: ['./teacher-login.component.css']\n})\nexport class TeacherLoginComponent {\n  public loginForm = this.fb.group({\n    username: ['', [Validators.required]],\n    password: ['', [Validators.required]]\n  });\n\n  constructor(\n    private readonly fb: FormBuilder,\n    private readonly authService: AuthService,\n    private readonly router: Router\n  ) { }\n\n  public submit(): void {\n    if(this.loginForm.invalid) {\n      return;\n    }\n\n    const { username, password } = this.loginForm.value;\n\n    this.authService.teacherLogin(username, password)\n      .pipe(take(1))\n      .subscribe((data) => {\n        localStorage.setItem(\"token_id\", data.tokenId);\n        this.router.navigate(['/teacher/subjects']);\n      });\n  }\n\n}\n","<div class=\"form-wrapper\">\n\n    <div class=\"center-form\">\n        <form [formGroup]=\"loginForm\" (ngSubmit)=\"submit()\" class=\"form-box\">\n            <h2>Teacher sign in</h2>\n            <div>\n                <input formControlName=\"username\" type=\"text\" placeholder=\"Username\" class=\"blue-input\">\n                <input formControlName=\"password\" type=\"password\" placeholder=\"Password\" class=\"blue-input\">\n            </div>\n            <button class=\"hover form-blue-button auth-bottom-button\" type=\"submit\"\n            [disabled]=\"this.loginForm.invalid\">\n                Sign in\n            </button>\n        </form>\n\n        <p class=\"form-bottom-text\">Don't have a teacher account? <span class=\"hover\" routerLink=\"/auth/teacher-register\">\n            <b>Sign up.</b>\n        </span></p>\n    </div>\n</div>\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { AppSettings } from 'src/app/core/app-settings';\nimport { Token } from 'src/app/core/models';\n\n@Injectable()\nexport class AuthService {\n  private readonly baseUrl: string = `${AppSettings.API_ENDPOINT}/auth`;\n  \n  constructor\n  (\n    private readonly http: HttpClient\n  ) { }\n\n  public studentLogin(username: string, password: string): Observable<Token> {\n    return this.http.post<Token>(`${this.baseUrl}/student-login`, { username, password });\n  }\n\n  public studentRegister(\n    username: string, \n    email: string, \n    facultyNumber: string, \n    password: string): Observable<void> \n    {\n    return this.http.post<void>(`${this.baseUrl}/student-register`, { \n      username, \n      email, \n      facultyNumber, \n      password\n    });\n  }\n\n  public teacherRegister(username: string, password: string, email: string): Observable<void> {\n    return this.http.post<void>(`${this.baseUrl}/teacher-register`, \n    { username, password, email });\n  }\n  \n  public teacherLogin(username: string, password: string): Observable<Token> {\n    return this.http.post<Token>(`${this.baseUrl}/teacher-login`, { username, password });\n  }\n\n}\n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { AuthService } from '../services/auth.service';\n\n@Component({\n  selector: 'app-student-login',\n  templateUrl: './student-login.component.html',\n  styleUrls: ['./student-login.component.css']\n})\nexport class StudentLoginComponent {\n\n  public loginForm = this.fb.group({\n    username: ['', [Validators.required]],\n    password: ['', [Validators.required]]\n  });\n\n  constructor(\n    private readonly fb: FormBuilder,\n    private readonly authService: AuthService,\n    private readonly router: Router) { }\n\n    public submit(): void {\n    if (this.loginForm.invalid) {\n      return;\n    }\n\n    const { username, password } = this.loginForm.value;\n\n    this.authService.studentLogin(username, password).subscribe((data) => {\n      localStorage.setItem(\"token_id\", data.tokenId);\n      this.router.navigate(['/student/subjects']);\n    }\n    );\n  }\n\n}\n","<div class=\"form-wrapper\">\n\n    <div class=\"center-form\">\n        <form [formGroup]=\"loginForm\" (ngSubmit)=\"submit()\" class=\"form-box\">\n            <h2>Student sign in</h2>\n            <div>\n                <input formControlName=\"username\" type=\"text\" placeholder=\"Username\" class=\"blue-input\">\n\n                <input formControlName=\"password\" type=\"password\" placeholder=\"Password\"\n                    class=\"blue-input\">\n            </div>\n            <button class=\"hover form-blue-button auth-bottom-button\" \n            type=\"submit\" [disabled]=\"this.loginForm.invalid\">\n                Sign in\n            </button>\n        </form>\n\n        <p class=\"form-bottom-text\">Don't have a student account? <span class=\"hover\"\n                routerLink=\"/auth/student-register\">\n                <b>Sign up.</b>\n            </span></p>\n    </div>\n\n</div>","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { AuthRoutingModule } from './auth-routing.module';\nimport { TeacherLoginComponent } from './teacher-login/teacher-login.component';\nimport { TeacherRegisterComponent } from './teacher-register/teacher-register.component';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { StudentLoginComponent } from './student-login/student-login.component';\nimport { StudentRegisterComponent } from './student-register/student-register.component';\nimport { AuthService } from './services/auth.service';\n\n\n\n@NgModule({\n  declarations: [TeacherLoginComponent, TeacherRegisterComponent, StudentLoginComponent, StudentRegisterComponent],\n  imports: [\n    CommonModule,\n    AuthRoutingModule,\n    ReactiveFormsModule,\n    FormsModule\n  ],\n  providers: [\n    AuthService\n  ]\n})\nexport class AuthModule { }\n","import { Component } from '@angular/core';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { take } from 'rxjs/operators';\nimport { MatchPasswords } from '../../helpers/match-passwords.validator'\nimport { AuthService } from '../services/auth.service';\n\n@Component({\n  selector: 'app-teacher-register',\n  templateUrl: './teacher-register.component.html',\n  styleUrls: ['./teacher-register.component.css']\n})\nexport class TeacherRegisterComponent {\n  public registerForm = this.fb.group({\n    username: ['', [Validators.required]],\n    email: ['', [Validators.required, Validators.email]],\n    password: ['', [Validators.required]],\n    confirmPassword: ['', [Validators.required]]\n  },\n    { validator: MatchPasswords });\n\n  constructor(\n    private readonly fb: FormBuilder,\n    private readonly authService: AuthService,\n    private readonly router: Router\n  ) { }\n\n  public submit(): void {\n    if(this.registerForm.invalid) {\n      return;\n    }\n\n    const { username, password, email } = this.registerForm.value;\n\n    this.authService.teacherRegister(username, password, email)\n      .pipe(take(1))\n      .subscribe(() => {\n        this.router.navigate(['/auth/teacher-login']);\n      });\n  }\n\n}\n","<div class=\"form-wrapper\">\n\n    <div class=\"center-form\">\n        <form [formGroup]=\"registerForm\" class=\"form-box\">\n            <h2>Teacher sign up</h2>\n            <div>\n                <input formControlName=\"username\" type=\"text\" \n                placeholder=\"Username\" class=\"blue-input\">\n\n                <input formControlName=\"email\" type=\"email\" \n                placeholder=\"Email\" class=\"blue-input\">\n\n                <input formControlName=\"password\" type=\"password\" \n                placeholder=\"Password\" class=\"blue-input\">\n\n                <input formControlName=\"confirmPassword\" type=\"password\"\n                placeholder=\"Confirm password\" class=\"blue-input\">\n            </div>\n            <button class=\"hover form-blue-button auth-bottom-button\" type=\"submit\"\n            [disabled]=\"this.registerForm.invalid\" (click)=\"submit()\">\n            Sign up\n        </button>\n        </form>\n\n        <p class=\"form-bottom-text\">Already have a teacher account? <span class=\"hover\"\n                routerLink=\"/auth/teacher-login\"><b>Sign in.</b></span></p>\n    </div>\n</div>"]}