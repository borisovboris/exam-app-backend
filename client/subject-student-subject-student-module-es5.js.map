{"version":3,"sources":["webpack:///src/app/teacher/subject-student/add-student/add-student.component.ts","webpack:///src/app/teacher/subject-student/add-student/add-student.component.html","webpack:///src/app/teacher/subject-student/subject-student.module.ts","webpack:///src/app/teacher/subject-student/students/students.component.ts","webpack:///src/app/teacher/subject-student/students/students.component.html","webpack:///src/app/teacher/subject-student/subject-student-routing.module.ts"],"names":["AddStudentComponent","subjectService","route","newStudentEvent","subjectId","snapshot","paramMap","get","inputSubscription","input","nativeElement","subscribe","criterion","value","students$","searchStudents","student","selectedStudent","addStudentToSubject","id","data","emit","unsubscribe","submitStudent","SubjectStudentModule","StudentsComponent","refreshedStudents$","subject$","getSubject","pipe","_","getSubjectStudents","next","studentId","removeStudentFromSubject","refreshStudents","routes","path","children","component","pathMatch","SubjectStudentRoutingModule","forChild"],"mappings":"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","file":"subject-student-subject-student-module-es5.js","sourcesContent":["import { Component, ElementRef, EventEmitter, OnDestroy, OnInit, Output, ViewChild } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { fromEvent, Observable, Subscription } from 'rxjs';\nimport { Student } from 'src/app/core/models';\nimport { SubjectService } from '../../services/subject.service';\n\n@Component({\n  selector: 'app-add-student',\n  templateUrl: './add-student.component.html',\n  styleUrls: ['./add-student.component.css']\n})\nexport class AddStudentComponent implements OnDestroy {\n  @ViewChild('input') public input!: ElementRef;\n\n  public inputSubscription!: Subscription;\n  public students$!: Observable<Array<Student>>;\n  public subjectId: string | null;\n  public selectedStudent!: Student | null;\n  @Output() public newStudentEvent = new EventEmitter<void>();\n\n\n  constructor(\n    private readonly subjectService: SubjectService,\n    private readonly route: ActivatedRoute,\n  ) { \n    this.subjectId = this.route.snapshot.paramMap.get('subject-id');\n  }\n\n  public ngAfterViewInit() {\n    this.inputSubscription = fromEvent(this.input.nativeElement, 'keyup')\n    .subscribe(() => {\n      const criterion = this.input.nativeElement.value;\n      this.students$ = this.subjectService.searchStudents(this.subjectId, criterion);\n    });\n  }\n\n  public selectStudent(student: Student): void {\n    this.selectedStudent = student;\n  }\n\n  public deselectStudent(): void {\n    this.selectedStudent = null;\n  }\n\n  public submitStudent(): void {\n\n    if(!this.selectedStudent) { \n      return;\n    }\n\n    this.subjectService.addStudentToSubject(this.subjectId, this.selectedStudent.id).subscribe(data => {\n      this.selectedStudent = null;\n      this.newStudentEvent.emit();\n    });\n\n  }\n\n  public ngOnDestroy() {\n    this.inputSubscription!.unsubscribe();\n  }\n}\n","<div>\n\n        <form>\n            <h1>Add student</h1>\n            <div>\n\n                <div [hidden]=\"selectedStudent\">\n                    <input placeholder=\"Search by email or faculty number\" #input class=\"blue-input\">\n    \n                    <ul class=\"search-result-list box-shadow\">\n                        <ng-container *ngFor=\"let student of students$ | async\">\n                            <li class=\"hover\" (click)=\"selectStudent(student)\">\n                                <div>{{student.email}}</div>\n                                <div>{{student.facultyNumber}}</div>\n                            </li>\n                        </ng-container>\n                    </ul>\n                </div>\n\n                <div *ngIf=\"selectedStudent\">\n                    <div class=\"selected-result box-shadow\">\n                        <p>{{selectedStudent.username}}</p>\n                        <p>{{selectedStudent.email}}@outlook.com</p>\n                    </div>\n                    <button id=\"cancel\" class=\"hover white-button\" (click)=\"deselectStudent()\">Cancel</button>\n                </div>\n\n            </div>\n\n            <button id=\"add\" class=\"hover form-blue-button submit-button\" type=\"button\" (click)=\"submitStudent()\"\n            [disabled]=\"!selectedStudent\">\n            Add\n        </button>\n        </form>\n</div>\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { StudentsComponent } from '../subject-student/students/students.component';\nimport { AddStudentComponent } from '../subject-student/add-student/add-student.component';\n\nimport { SubjectStudentRoutingModule } from './subject-student-routing.module';\n\n\n@NgModule({\n  declarations: [\n    StudentsComponent,\n    AddStudentComponent\n  ],\n  imports: [\n    CommonModule,\n    SubjectStudentRoutingModule\n  ]\n})\nexport class SubjectStudentModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { switchMap, take } from 'rxjs/operators';\nimport { Student, Subject } from 'src/app/core/models';\nimport { SubjectService } from '../../services/subject.service';\n\n@Component({\n  selector: 'app-students',\n  templateUrl: './students.component.html',\n  styleUrls: ['./students.component.css']\n})\nexport class StudentsComponent implements OnInit {\n  public students$!: Observable<Array<Student>>;\n  public refreshedStudents$ = new BehaviorSubject<boolean>(true);\n  public subject$!: Observable<Subject>;\n  public subjectId: string | null;\n\n  constructor\n    (\n      private readonly subjectService: SubjectService,\n      private readonly route: ActivatedRoute,\n  ) {\n    this.subjectId = this.route.snapshot.paramMap.get('subject-id');\n  }\n\n  public ngOnInit(): void {\n    this.subject$ = this.subjectService.getSubject(this.subjectId);\n    this.students$ = this.refreshedStudents$.\n      pipe(switchMap(_ => this.subjectService.getSubjectStudents(this.subjectId)));\n  }\n\n  public refreshStudents(): void {\n    this.refreshedStudents$.next(true);\n  }\n\n  public removeStudentFromSubject(studentId: number): void {\n    this.subjectService.removeStudentFromSubject(this.subjectId, studentId)\n      .pipe(take(1))\n      .subscribe(() => {\n        this.refreshStudents();\n      });\n\n  }\n\n}\n","<ng-container *ngIf=\"subject$ | async as subject\">\n\n    <div class=\"page-wrapper\">\n        <nav class=\"navbar\">\n            <div class=\"heading-nav\">\n                <h2> {{subject.name | uppercase}}</h2>\n            </div>\n        </nav>\n\n        <div class=\"half-flex-container\">\n\n            <div class=\"half-flex-item left\">\n                <h2>Students</h2>\n\n                <ng-container *ngIf=\"(students$ | async) as students\">\n                    <ng-container *ngIf=\"students.length !== 0; else empty\">\n                        <table class=\"info-table\">\n                            <thead>\n                                <th>Email</th>\n                                <th>Faculty number</th>\n                                <th>Action</th>\n                            </thead>\n\n                            <tbody>\n                                <tr *ngFor=\"let student of students\">\n                                    <td data-label=\" Email\">{{student.email}}</td>\n                                    <td data-label=\"Faculty number\">{{student.facultyNumber}}</td>\n                                    <td data-label=\"Action\" (click)=\"removeStudentFromSubject(student.id)\">Remove</td>\n                                </tr>\n                            </tbody>\n                        </table>\n                    </ng-container>\n                </ng-container>\n\n                <ng-template #empty>\n                    <p id=\"empty\">No students have been added to this subject yet.</p>\n                </ng-template>\n\n            </div>\n\n            <div class=\"half-flex-item right box-shadow\">\n                <app-add-student (newStudentEvent)=\"refreshStudents()\"></app-add-student>\n            </div>\n\n        </div>\n    </div>\n\n</ng-container>","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { StudentsComponent } from './students/students.component';\n\nconst routes: Routes = [\n  { path: '', children: [\n    { path: '', component: StudentsComponent, pathMatch: 'full'}\n  ]}\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class SubjectStudentRoutingModule { }\n"]}