{"version":3,"sources":["./src/app/auth/auth-routing.module.ts","./src/app/helpers/match-passwords.validator.ts","./src/app/auth/student-register/student-register.component.ts","./src/app/auth/student-register/student-register.component.html","./src/app/auth/teacher-login/teacher-login.component.ts","./src/app/auth/teacher-login/teacher-login.component.html","./src/app/auth/services/auth.service.ts","./src/app/auth/student-login/student-login.component.ts","./src/app/auth/student-login/student-login.component.html","./src/app/auth/auth.module.ts","./src/app/auth/teacher-register/teacher-register.component.ts","./src/app/auth/teacher-register/teacher-register.component.html"],"names":[],"mappings":"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","file":"auth-auth-module-es2015.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { StudentLoginComponent } from './student-login/student-login.component';\nimport { StudentRegisterComponent } from './student-register/student-register.component';\nimport { TeacherLoginComponent } from './teacher-login/teacher-login.component';\nimport { TeacherRegisterComponent } from './teacher-register/teacher-register.component';\n\nconst routes: Routes = [{\n  path: '', children: [\n    { path: 'teacher-login', component: TeacherLoginComponent },\n    { path: 'teacher-register', component: TeacherRegisterComponent },\n    { path: 'student-login', component: StudentLoginComponent },\n    { path: 'student-register', component: StudentRegisterComponent }\n  ]\n}\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class AuthRoutingModule { }\n","import { AbstractControl } from '@angular/forms';\r\n\r\nexport function MatchPasswords(formGroup: AbstractControl): void {\r\n\r\n    const password = formGroup.get('password');\r\n    const confirmPassword = formGroup.get('confirmPassword');\r\n\r\n    if (confirmPassword?.errors && !confirmPassword.errors.passwordMatch) {\r\n        return;\r\n    }\r\n\r\n    if (password?.value !== confirmPassword?.value) {\r\n        confirmPassword?.setErrors({ passwordMatch: true });\r\n    } else {\r\n        confirmPassword?.setErrors(null);\r\n    }\r\n\r\n}\r\n","import { Component } from '@angular/core';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { take } from 'rxjs/operators';\nimport { MatchPasswords } from 'src/app/helpers/match-passwords.validator';\nimport { AuthService } from '../services/auth.service';\n\n@Component({\n  selector: 'app-student-register',\n  templateUrl: './student-register.component.html',\n  styleUrls: ['./student-register.component.css']\n})\nexport class StudentRegisterComponent {\n\n  public registerForm = this.fb.group({\n    username: ['', [Validators.required]],\n    email: ['', [Validators.required, Validators.email]],\n    facultyNumber: ['', [Validators.required]],\n    password: ['', [Validators.required]],\n    confirmPassword: ['', [Validators.required]]\n  },\n    { validator: MatchPasswords });\n\n  constructor(\n    private readonly fb: FormBuilder,\n    private readonly authService: AuthService,\n    private readonly router: Router\n  ) { }\n\n  public submit(): void {\n    if(this.registerForm.invalid) {\n      return;\n    }\n    \n    const { username, email, facultyNumber, password } = this.registerForm.value;\n\n    this.authService.studentRegister(username, email, facultyNumber, password)\n      .pipe(take(1))\n      .subscribe(() => {\n        this.router.navigate(['/auth/student-login']);\n      });\n  }\n\n}\n","<div class=\"form-wrapper\">\n\n    <div class=\"center-form\">\n        <form [formGroup]=\"registerForm\" class=\"form-box\">\n            <h2>Student sign up</h2>\n            <div>\n                <input formControlName=\"username\" type=\"text\" \n                placeholder=\"Username\" class=\"blue-input\">\n\n                <input formControlName=\"email\" type=\"email\" \n                placeholder=\"Email\" class=\"blue-input\">\n\n                <input formControlName=\"facultyNumber\" type=\"text\" \n                placeholder=\"Faculty number\" class=\"blue-input\">\n\n                <input formControlName=\"password\" type=\"password\" \n                placeholder=\"Password\" class=\"blue-input\">\n\n                <input formControlName=\"confirmPassword\" type=\"password\" \n                placeholder=\"Confirm password\" class=\"blue-input\">\n            </div>\n            <button class=\"hover form-blue-button auth-bottom-button\" type=\"submit\"\n            [disabled]=\"this.registerForm.invalid\" (click)=\"submit()\">\n                Sign up\n            </button>\n        </form>\n\n        <p class=\"form-bottom-text\">Already have a student account? <span class=\"hover\"\n                routerLink=\"/auth/student-login\">\n                <b>Sign in.</b>\n            </span></p>\n    </div>\n</div>","import { Component } from '@angular/core';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { take } from 'rxjs/operators';\nimport { AuthService } from '../services/auth.service';\n\n@Component({\n  selector: 'app-teacher-login',\n  templateUrl: './teacher-login.component.html',\n  styleUrls: ['./teacher-login.component.css']\n})\nexport class TeacherLoginComponent {\n  public loginForm = this.fb.group({\n    username: ['', [Validators.required]],\n    password: ['', [Validators.required]]\n  });\n\n  constructor(\n    private readonly fb: FormBuilder,\n    private readonly authService: AuthService,\n    private readonly router: Router\n  ) { }\n\n  public submit(): void {\n    if(this.loginForm.invalid) {\n      return;\n    }\n\n    const { username, password } = this.loginForm.value;\n\n    this.authService.teacherLogin(username, password)\n      .pipe(take(1))\n      .subscribe((data) => {\n        localStorage.setItem(\"token_id\", data.tokenId);\n        this.router.navigate(['/teacher/subjects']);\n      });\n  }\n\n}\n","<div class=\"form-wrapper\">\n\n    <div class=\"center-form\">\n        <form [formGroup]=\"loginForm\" (ngSubmit)=\"submit()\" class=\"form-box\">\n            <h2>Teacher sign in</h2>\n            <div>\n                <input formControlName=\"username\" type=\"text\" placeholder=\"Username\" class=\"blue-input\">\n                <input formControlName=\"password\" type=\"password\" placeholder=\"Password\" class=\"blue-input\">\n            </div>\n            <button class=\"hover form-blue-button auth-bottom-button\" type=\"submit\"\n            [disabled]=\"this.loginForm.invalid\">\n                Sign in\n            </button>\n        </form>\n\n        <p class=\"form-bottom-text\">Don't have a teacher account? <span class=\"hover\" routerLink=\"/auth/teacher-register\">\n            <b>Sign up.</b>\n        </span></p>\n    </div>\n</div>\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { AppSettings } from 'src/app/core/app-settings';\nimport { Token } from 'src/app/core/models';\n\n@Injectable()\nexport class AuthService {\n  private readonly baseUrl: string = `${AppSettings.API_ENDPOINT}/auth`;\n  \n  constructor\n  (\n    private readonly http: HttpClient\n  ) { }\n\n  public studentLogin(username: string, password: string): Observable<Token> {\n    return this.http.post<Token>(`${this.baseUrl}/student-login`, { username, password });\n  }\n\n  public studentRegister(\n    username: string, \n    email: string, \n    facultyNumber: string, \n    password: string): Observable<void> \n    {\n    return this.http.post<void>(`${this.baseUrl}/student-register`, { \n      username, \n      email, \n      facultyNumber, \n      password\n    });\n  }\n\n  public teacherRegister(username: string, password: string, email: string): Observable<void> {\n    return this.http.post<void>(`${this.baseUrl}/teacher-register`, \n    { username, password, email });\n  }\n  \n  public teacherLogin(username: string, password: string): Observable<Token> {\n    return this.http.post<Token>(`${this.baseUrl}/teacher-login`, { username, password });\n  }\n\n}\n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { AuthService } from '../services/auth.service';\n\n@Component({\n  selector: 'app-student-login',\n  templateUrl: './student-login.component.html',\n  styleUrls: ['./student-login.component.css']\n})\nexport class StudentLoginComponent {\n\n  public loginForm = this.fb.group({\n    username: ['', [Validators.required]],\n    password: ['', [Validators.required]]\n  });\n\n  constructor(\n    private readonly fb: FormBuilder,\n    private readonly authService: AuthService,\n    private readonly router: Router) { }\n\n    public submit(): void {\n    if (this.loginForm.invalid) {\n      return;\n    }\n\n    const { username, password } = this.loginForm.value;\n\n    this.authService.studentLogin(username, password).subscribe((data) => {\n      localStorage.setItem(\"token_id\", data.tokenId);\n      this.router.navigate(['/student/subjects']);\n    }\n    );\n  }\n\n}\n","<div class=\"form-wrapper\">\n\n    <div class=\"center-form\">\n        <form [formGroup]=\"loginForm\" (ngSubmit)=\"submit()\" class=\"form-box\">\n            <h2>Student sign in</h2>\n            <div>\n                <input formControlName=\"username\" type=\"text\" placeholder=\"Username\" class=\"blue-input\">\n\n                <input formControlName=\"password\" type=\"password\" placeholder=\"Password\"\n                    class=\"blue-input\">\n            </div>\n            <button class=\"hover form-blue-button auth-bottom-button\" \n            type=\"submit\" [disabled]=\"this.loginForm.invalid\">\n                Sign in\n            </button>\n        </form>\n\n        <p class=\"form-bottom-text\">Don't have a student account? <span class=\"hover\"\n                routerLink=\"/auth/student-register\">\n                <b>Sign up.</b>\n            </span></p>\n    </div>\n\n</div>","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { AuthRoutingModule } from './auth-routing.module';\nimport { TeacherLoginComponent } from './teacher-login/teacher-login.component';\nimport { TeacherRegisterComponent } from './teacher-register/teacher-register.component';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { StudentLoginComponent } from './student-login/student-login.component';\nimport { StudentRegisterComponent } from './student-register/student-register.component';\nimport { AuthService } from './services/auth.service';\n\n\n\n@NgModule({\n  declarations: [TeacherLoginComponent, TeacherRegisterComponent, StudentLoginComponent, StudentRegisterComponent],\n  imports: [\n    CommonModule,\n    AuthRoutingModule,\n    ReactiveFormsModule,\n    FormsModule\n  ],\n  providers: [\n    AuthService\n  ]\n})\nexport class AuthModule { }\n","import { Component } from '@angular/core';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { take } from 'rxjs/operators';\nimport { MatchPasswords } from '../../helpers/match-passwords.validator'\nimport { AuthService } from '../services/auth.service';\n\n@Component({\n  selector: 'app-teacher-register',\n  templateUrl: './teacher-register.component.html',\n  styleUrls: ['./teacher-register.component.css']\n})\nexport class TeacherRegisterComponent {\n  public registerForm = this.fb.group({\n    username: ['', [Validators.required]],\n    email: ['', [Validators.required, Validators.email]],\n    password: ['', [Validators.required]],\n    confirmPassword: ['', [Validators.required]]\n  },\n    { validator: MatchPasswords });\n\n  constructor(\n    private readonly fb: FormBuilder,\n    private readonly authService: AuthService,\n    private readonly router: Router\n  ) { }\n\n  public submit(): void {\n    if(this.registerForm.invalid) {\n      return;\n    }\n\n    const { username, password, email } = this.registerForm.value;\n\n    this.authService.teacherRegister(username, password, email)\n      .pipe(take(1))\n      .subscribe(() => {\n        this.router.navigate(['/auth/teacher-login']);\n      });\n  }\n\n}\n","<div class=\"form-wrapper\">\n\n    <div class=\"center-form\">\n        <form [formGroup]=\"registerForm\" class=\"form-box\">\n            <h2>Teacher sign up</h2>\n            <div>\n                <input formControlName=\"username\" type=\"text\" \n                placeholder=\"Username\" class=\"blue-input\">\n\n                <input formControlName=\"email\" type=\"email\" \n                placeholder=\"Email\" class=\"blue-input\">\n\n                <input formControlName=\"password\" type=\"password\" \n                placeholder=\"Password\" class=\"blue-input\">\n\n                <input formControlName=\"confirmPassword\" type=\"password\"\n                placeholder=\"Confirm password\" class=\"blue-input\">\n            </div>\n            <button class=\"hover form-blue-button auth-bottom-button\" type=\"submit\"\n            [disabled]=\"this.registerForm.invalid\" (click)=\"submit()\">\n            Sign up\n        </button>\n        </form>\n\n        <p class=\"form-bottom-text\">Already have a teacher account? <span class=\"hover\"\n                routerLink=\"/auth/teacher-login\"><b>Sign in.</b></span></p>\n    </div>\n</div>"],"sourceRoot":"webpack:///"}