{"version":3,"sources":["webpack:///src/app/teacher/exam/exam-routing.module.ts","webpack:///src/app/teacher/exam/exam-edit/exam-edit.component.ts","webpack:///src/app/teacher/exam/exam-edit/exam-edit.component.html","webpack:///src/app/teacher/exam/exam-details/exam-details.component.ts","webpack:///src/app/teacher/exam/exam-details/exam-details.component.html","webpack:///src/app/teacher/exam/exams/exams.component.ts","webpack:///src/app/teacher/exam/exams/exams.component.html","webpack:///src/app/teacher/exam/add-exam/add-exam.component.ts","webpack:///src/app/teacher/exam/add-exam/add-exam.component.html","webpack:///src/app/teacher/services/exam.service.ts","webpack:///src/app/teacher/exam/exam.module.ts"],"names":["routes","path","children","component","pathMatch","ExamRoutingModule","forChild","ExamEditComponent","fb","route","router","examService","examEditForm","group","name","required","subjectId","snapshot","paramMap","get","examId","getExam","pipe","subscribe","exam","patchValue","invalid","value","editExam","data","navigate","submit","ExamDetailsComponent","subjectService","topicService","exam$","examQuestions$","getExamQuestions","topics$","getSubjectTopics","topicId","questions$","getTopicQuestions","questionId","addQuestionToExam","removeQuestionFromExam","$event","stopPropagation","ExamsComponent","refreshedExams$","subject$","getSubject","exams$","_","getSubjectExams","next","deleteExam","refreshExams","AddExamComponent","examForm","createExam","ExamService","http","baseUrl","API_ENDPOINT","post","patch","ExamModule"],"mappings":";;;;;;;;;;;;;;;;;;;;AACA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA,c,CAMC;AACG;AACA;;;AAGJ,UAAMA,MAAM,GAAW,CACrB;AAACC,YAAI,EAAE,EAAP;AAAWC,gBAAQ,EAAE,CACnB;AAAED,cAAI,EAAE,KAAR;AAAeE,mBAAS,EAAE;AAA1B,SADmB,EAEnB;AAAEF,cAAI,EAAE,eAAR;AAAyBE,mBAAS,EAAE;AAApC,SAFmB,EAGnB;AAAEF,cAAI,EAAE,UAAR;AAAoBE,mBAAS,EAAE;AAA/B,SAHmB,EAInB;AAAEF,cAAI,EAAE,EAAR;AAAYE,mBAAS,EAAE,qEAAvB;AAAuCC,mBAAS,EAAE;AAAlD,SAJmB;AAArB,OADqB,CAAvB;;UAaaC,iB;;;;;cAAAA;;;;2BAAAA,iB;AAAiB,S;AAAA,kBAHnB,CAAC,6DAAaC,QAAb,CAAsBN,MAAtB,CAAD,CAGmB,EAFlB,4DAEkB;;;;4HAAjBK,iB,EAAiB;AAAA;AAAA,oBAFlB,4DAEkB;AAAA,S;AAFN,O;;;;;;;;;;;;;;;;;ACtBxB;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;UAUaE,iB;AAQX,mCACmBC,EADnB,EAEmBC,KAFnB,EAGmBC,MAHnB,EAImBC,WAJnB,EAI2C;AAAA;;AAHxB,eAAAH,EAAA,GAAAA,EAAA;AACA,eAAAC,KAAA,GAAAA,KAAA;AACA,eAAAC,MAAA,GAAAA,MAAA;AACA,eAAAC,WAAA,GAAAA,WAAA;AARnB,eAAAC,YAAA,GAAe,KAAKJ,EAAL,CAAQK,KAAR,CAAc;AAC3BC,gBAAI,EAAE,CAAC,EAAD,EAAK,CAAC,0DAAWC,QAAZ,CAAL;AADqB,WAAd,CAAf;AAUE,eAAKC,SAAL,GAAiB,KAAKP,KAAL,CAAWQ,QAAX,CAAoBC,QAApB,CAA6BC,GAA7B,CAAiC,YAAjC,CAAjB;AACA,eAAKC,MAAL,GAAc,KAAKX,KAAL,CAAWQ,QAAX,CAAoBC,QAApB,CAA6BC,GAA7B,CAAiC,SAAjC,CAAd;AACD;;;;iBAED,oBAAQ;AAAA;;AACN,iBAAKR,WAAL,CAAiBU,OAAjB,CAAyB,KAAKD,MAA9B,EACCE,IADD,CACM,4DAAK,CAAL,CADN,EAECC,SAFD,CAEW,UAACC,IAAD,EAAU;AAAA,kBACXV,IADW,GACFU,IADE,CACXV,IADW;;AAEnB,mBAAI,CAACF,YAAL,CAAkBa,UAAlB,CAA6B;AAAEX,oBAAI,EAAJA;AAAF,eAA7B;AACD,aALD;AAMD;;;iBAED,kBAAM;AAAA;;AACJ,gBAAG,KAAKF,YAAL,CAAkBc,OAArB,EAA8B;AAC5B;AACD;;AAHG,gBAKIZ,IALJ,GAKa,KAAKF,YAAL,CAAkBe,KAL/B,CAKIb,IALJ;AAOJ,iBAAKH,WAAL,CAAiBiB,QAAjB,CAA0B,KAAKR,MAA/B,EAAuCN,IAAvC,EACCQ,IADD,CACM,4DAAK,CAAL,CADN,EAECC,SAFD,CAEW,UAACM,IAAD,EAAU;AACnB,oBAAI,CAACnB,MAAL,CAAYoB,QAAZ,CAAqB,6BAAsB,MAAI,CAACd,SAA3B,YAArB;AACD,aAJD;AAKD;;;;;;;yBAvCUT,iB,EAAiB,2H,EAAA,+H,EAAA,uH,EAAA,mI;AAAA,O;;;cAAjBA,iB;AAAiB,sC;AAAA,gB;AAAA,e;AAAA,iS;AAAA;AAAA;ACX9B;;AAEI;;AACI;;AAAiC;AAAA,qBAAY,IAAAwB,MAAA,EAAZ;AAAoB,aAApB;;AAC7B;;AAAI;;AAAS;;AACb;;AACI;;AACJ;;AAEA;;AAC2C;;AAAI;;AACnD;;AACJ;;AACJ;;;;AAVc;;AAAA;;AAOE;;AAAA;;;;;;;;;;;;;;;;;;;;;ACPhB;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;;;ACcgC;;AAEI;;AACI;;AACI;;AAAI;;AAAiC;;AACrC;;AAAQ;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AACe;;AAAM;;AACjC;;AACA;;AAAI;;AAAmC;;AACvC;;AACJ;;AACJ;;;;;;;;;AAPgB;;AAAA;;AAIJ;;AAAA;;;;;;AAcA;;AACI;;AAAG;;AAAgB;;AAAG;;AAAsB;;AAAI;;AACpD;;;;;;AADO;;AAAA;;AAAmB;;AAAA;;;;;;;;AATlC;;AACI;;AACI;;AAAI;;AAAiC;;AACrC;;AAAQ;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AACe;;AAAM;;AACjC;;AACA;;AAAI;;AAAmC;;AACvC;;AACI;;AAGJ;;AACJ;;;;;;;;;AAVY;;AAAA;;AAIJ;;AAAA;;AAE2C;;AAAA;;;;;;AAvB3D;;AACI;;AAaA;;AAeJ;;;;;;;;AA3BS;;AAAA,0HAAiD,UAAjD,EAAiD,IAAjD;;;;;;AALjB;;AAEI;;AACI;;AA8BJ;;AACJ;;;;;;AA/B+C;;AAAA;;;;;;AAJnD;;AACI;;AAmCJ;;;;;;;;;;AAnCmB;;AAAA,2GAAkC,UAAlC,EAAkC,GAAlC;;;;;;AAsCf;;AAAc;;AAA8C;;;;;;AAS5D;;AACI;;AACJ;;;;;;AAF8C;;AAC1C;;AAAA;;;;;;;;AAQI;;AACI;;AACI;;AAAG;;AAAkB;;AACrB;;AAAQ;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAAuD;;AAAG;;AACtE;;AACJ;;;;;;AAHW;;AAAA;;;;;;AAJnB;;AACI;;AACI;;AAMJ;;AACJ;;;;;;AAPiC;;AAAA;;;;;;AAHrC;;AACI;;AAUJ;;;;;;;;;;AAVmB;;AAAA,uGAA+B,UAA/B,EAA+B,GAA/B;;;;;;AAaf;;AAAG;;AAA+B;;;;;;;;AAhFtD;;AACI;;AACI;;AACI;;AACI;;AAAiB;;AAAG;;;;AAAyB;;AAAK;;AAAM;;AAC5D;;AACJ;;AAEA;;AAEI;;AACI;;AAAuB;;AAAc;;AACrC;;;;AAsCA;;AAIJ;;AAEA;;AACI;;AAAuB;;AAAc;;AAErC;;AACI;;;;AAGJ;;AACA;;AAAQ;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAAwD;;AAAM;;AAEtE;;;;AAaA;;AAIJ;;AAEJ;;AACJ;;AACJ;;;;;;;;AAnFoC;;AAAA;;AAQL;;AAAA;;AAgDe;;AAAA;;AAMf;;AAAA;;;;UDpDlBC,oB;AAQX,sCAEqBrB,WAFrB,EAGqBsB,cAHrB,EAIqBC,YAJrB,EAKqBzB,KALrB,EAK0C;AAAA;;AAHrB,eAAAE,WAAA,GAAAA,WAAA;AACA,eAAAsB,cAAA,GAAAA,cAAA;AACA,eAAAC,YAAA,GAAAA,YAAA;AACA,eAAAzB,KAAA,GAAAA,KAAA;AAEnB,eAAKW,MAAL,GAAc,KAAKX,KAAL,CAAWQ,QAAX,CAAoBC,QAApB,CAA6BC,GAA7B,CAAiC,SAAjC,CAAd;AACA,eAAKH,SAAL,GAAiB,KAAKP,KAAL,CAAWQ,QAAX,CAAoBC,QAApB,CAA6BC,GAA7B,CAAiC,YAAjC,CAAjB;AACD;;;;iBAEM,oBAAQ;AACb,iBAAKgB,KAAL,GAAa,KAAKxB,WAAL,CAAiBU,OAAjB,CAAyB,KAAKD,MAA9B,CAAb;AACA,iBAAKgB,cAAL,GAAsB,KAAKzB,WAAL,CAAiB0B,gBAAjB,CAAkC,KAAKjB,MAAvC,CAAtB;AACA,iBAAKkB,OAAL,GAAe,KAAKL,cAAL,CAAoBM,gBAApB,CAAqC,KAAKvB,SAA1C,CAAf;AACD;;;iBAEM,qBAAYwB,OAAZ,EAA2B;AAChC,iBAAKC,UAAL,GAAkB,KAAKP,YAAL,CAAkBQ,iBAAlB,CAAoCF,OAApC,CAAlB;AACD;;;iBAEM,qBAAYG,UAAZ,EAA8B;AAAA;;AACnC,iBAAKhC,WAAL,CAAiBiC,iBAAjB,CAAmC,KAAKxB,MAAxC,EAAgDuB,UAAhD,EACCrB,IADD,CACM,4DAAK,CAAL,CADN,EAECC,SAFD,CAEW,YAAM;AACf,oBAAI,CAACa,cAAL,GAAsB,MAAI,CAACzB,WAAL,CAAiB0B,gBAAjB,CAAkC,MAAI,CAACjB,MAAvC,CAAtB;AACD,aAJD;AAKD;;;iBAEM,wBAAeuB,UAAf,EAAiC;AAAA;;AACtC,iBAAKhC,WAAL,CAAiBkC,sBAAjB,CAAwC,KAAKzB,MAA7C,EAAqDuB,UAArD,EACCrB,IADD,CACM,4DAAK,CAAL,CADN,EAECC,SAFD,CAEW,YAAM;AACf,oBAAI,CAACa,cAAL,GAAsB,MAAI,CAACzB,WAAL,CAAiB0B,gBAAjB,CAAkC,MAAI,CAACjB,MAAvC,CAAtB;AACD,aAJD;AAKD;;;;;;;yBA3CUY,oB,EAAoB,mI,EAAA,yI,EAAA,qI,EAAA,+H;AAAA,O;;;cAApBA,oB;AAAoB,yC;AAAA,gB;AAAA,e;AAAA,uvB;AAAA;AAAA;ACdjC;;;;;;AAAe;;;;;;;;;;;;;;;;;;;;;;ACEf;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;;;ACqBgB;;AAEI;;AACI;;AACI;;AACJ;;AACJ;;AACA;;AACI;;AAAG;;AAAI;;AACX;;AACA;;AAA0B;AAAA;;AAAA;;AAAA;;AAAA;AAAA,mBAA8Bc,MAAM,CAACC,eAAP,EAA9B;AAAsD,WAAtD;;AACtB;;AAAG;;AAAM;;AACb;;AACJ;;;;;;AAZI;;AAGQ;;AAAA;;AAGgB;;AAAA;;;;;;AA9B5C;;AACI;;AAGI;;AACI;;AACI;;AAAiB;;;;AAA4B;;AACjD;;AACJ;;AAEA;;AACI;;AAAI;;AAAK;;AAET;;AAEI;;AACI;;AACI;;AACI;;AACJ;;AACJ;;AACJ;;AAEA;;;;AAeJ;;AACJ;;AACJ;;AACJ;;;;;;;;AAnCiC;;AAAA;;AAiBkD;;AAAA;;;;UDVtEC,c;AAMX,gCAEmBf,cAFnB,EAGmBxB,KAHnB,EAImBE,WAJnB,EAI2C;AAAA;;AAFxB,eAAAsB,cAAA,GAAAA,cAAA;AACA,eAAAxB,KAAA,GAAAA,KAAA;AACA,eAAAE,WAAA,GAAAA,WAAA;AAPZ,eAAAsC,eAAA,GAAkB,IAAI,oDAAJ,CAA6B,IAA7B,CAAlB;AASH,eAAKjC,SAAL,GAAiB,KAAKP,KAAL,CAAWQ,QAAX,CAAoBC,QAApB,CAA6BC,GAA7B,CAAiC,YAAjC,CAAjB;AACH;;;;iBAEM,oBAAQ;AAAA;;AACb,iBAAK+B,QAAL,GAAgB,KAAKjB,cAAL,CAAoBkB,UAApB,CAA+B,KAAKnC,SAApC,CAAhB;AACA,iBAAKoC,MAAL,GAAe,KAAKH,eAAL,CAAqB3B,IAArB,CAA0B,iEAAU,UAAA+B,CAAC;AAAA,qBAAI,MAAI,CAACpB,cAAL,CAAoBqB,eAApB,CAAoC,MAAI,CAACtC,SAAzC,CAAJ;AAAA,aAAX,CAA1B,CAAf;AACD;;;iBAEM,wBAAe;AACpB,iBAAKiC,eAAL,CAAqBM,IAArB,CAA0B,IAA1B;AACD;;;iBAEM,oBAAWnC,MAAX,EAAyB;AAAA;;AAC9B,iBAAKT,WAAL,CAAiB6C,UAAjB,CAA4BpC,MAA5B,EACCE,IADD,CACM,4DAAK,CAAL,CADN,EAECC,SAFD,CAEW,YAAM;AACf,oBAAI,CAACkC,YAAL;AACD,aAJD;AAKD;;;;;;;yBA9BUT,c,EAAc,yI,EAAA,+H,EAAA,mI;AAAA,O;;;cAAdA,c;AAAc,kC;AAAA,gB;AAAA,e;AAAA,qgB;AAAA;AAAA;ACb3B;;;;;;AAAe;;;;;;;;;;;;;;;;;;;;;;ACCf;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;;;ACDA;;AACI;;AAEI;;AACI;;AAA6B;AAAA;;AAAA;;AAAA;AAAA;;AACzB;;AAAI;;AAAW;;AACf;;AACI;;AACJ;;AAEA;;AAAsG;;AAAM;;AAChH;;AACJ;;AACJ;;AACJ;;;;;;AAVkB;;AAAA;;AAMiE;;AAAA;;;;UDEtEU,gB;AAQX,kCACmBlD,EADnB,EAEmBC,KAFnB,EAGmBC,MAHnB,EAImBuB,cAJnB,EAKmBtB,WALnB,EAK2C;AAAA;;AAJxB,eAAAH,EAAA,GAAAA,EAAA;AACA,eAAAC,KAAA,GAAAA,KAAA;AACA,eAAAC,MAAA,GAAAA,MAAA;AACA,eAAAuB,cAAA,GAAAA,cAAA;AACA,eAAAtB,WAAA,GAAAA,WAAA;AATnB,eAAAgD,QAAA,GAAW,KAAKnD,EAAL,CAAQK,KAAR,CAAc;AACvBC,gBAAI,EAAE,CAAC,EAAD,EAAK,CAAC,0DAAWC,QAAZ,CAAL;AADiB,WAAd,CAAX;AAWE,eAAKC,SAAL,GAAiB,KAAKP,KAAL,CAAWQ,QAAX,CAAoBC,QAApB,CAA6BC,GAA7B,CAAiC,YAAjC,CAAjB;AACD;;;;iBAED,oBAAQ;AACN,iBAAK+B,QAAL,GAAgB,KAAKjB,cAAL,CAAoBkB,UAApB,CAA+B,KAAKnC,SAApC,CAAhB;AACD;;;iBAED,kBAAM;AAAA;;AACJ,gBAAG,KAAK2C,QAAL,CAAcjC,OAAjB,EAA0B;AACxB;AACD;;AAHG,gBAKIZ,IALJ,GAKa,KAAK6C,QAAL,CAAchC,KAL3B,CAKIb,IALJ;AAOJ,iBAAKH,WAAL,CAAiBiD,UAAjB,CAA4B9C,IAA5B,EAAkC,KAAKE,SAAvC,EAAkDO,SAAlD,CAA4D,YAAM;AAChE,oBAAI,CAACb,MAAL,CAAYoB,QAAZ,CAAqB,6BAAsB,MAAI,CAACd,SAA3B,YAArB;AACD,aAFD;AAGD;;;;;;;yBAhCU0C,gB,EAAgB,2H,EAAA,+H,EAAA,uH,EAAA,yI,EAAA,mI;AAAA,O;;;cAAhBA,gB;AAAgB,qC;AAAA,gB;AAAA,e;AAAA,8S;AAAA;AAAA;ACZ7B;;;;;;AAAe;;;;;;;;;;;;;;;;;;;;;;ACGf;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;UAOaG,W;AAGX,6BAA6BC,IAA7B,EAA+C;AAAA;;AAAlB,eAAAA,IAAA,GAAAA,IAAA;AAFZ,eAAAC,OAAA,aAAqB,sEAAYC,YAAjC;AAEiC;;;;iBAE3C,oBAAWlD,IAAX,EAAyBE,SAAzB,EAAuC;AAC5C,mBAAO,KAAK8C,IAAL,CAAUG,IAAV,WAAwB,KAAKF,OAA7B,GAAwC;AAAEjD,kBAAI,EAAJA,IAAF;AAAQE,uBAAS,EAATA;AAAR,aAAxC,CAAP;AACD;;;iBAEM,kBAASI,MAAT,EAAsBN,IAAtB,EAAkC;AACvC,mBAAO,KAAKgD,IAAL,CAAUI,KAAV,WAAyB,KAAKH,OAA9B,cAAyC3C,MAAzC,GAAmD;AAAEN,kBAAI,EAAJA;AAAF,aAAnD,CAAP;AACD;;;iBAEM,iBAAQM,MAAR,EAAmB;AACxB,mBAAO,KAAK0C,IAAL,CAAU3C,GAAV,WAAsB,KAAK4C,OAA3B,cAAsC3C,MAAtC,EAAP;AACD;;;iBAEM,2BAAkBA,MAAlB,EAA+BuB,UAA/B,EAAiD;AACtD,mBAAO,KAAKmB,IAAL,CAAUG,IAAV,WAAwB,KAAKF,OAA7B,oBAAqD;AAAE3C,oBAAM,EAANA,MAAF;AAAUuB,wBAAU,EAAVA;AAAV,aAArD,CAAP;AACD;;;iBAEM,0BAAiBvB,MAAjB,EAA4B;AACjC,mBAAO,KAAK0C,IAAL,CAAU3C,GAAV,WAAkC,KAAK4C,OAAvC,cAAkD3C,MAAlD,gBAAP;AACD;;;iBAEM,gCAAuBA,MAAvB,EAAoCuB,UAApC,EAAsD;AAC3D,mBAAO,KAAKmB,IAAL,qBAA0B,KAAKC,OAA/B,cAA0C3C,MAA1C,8BAAoEuB,UAApE,EAAP;AACD;;;iBAEM,oBAAWvB,MAAX,EAAsB;AAC3B,mBAAO,KAAK0C,IAAL,qBAA0B,KAAKC,OAA/B,cAA0C3C,MAA1C,EAAP;AACD;;;;;;;yBA/BUyC,W,EAAW,uH;AAAA,O;;;eAAXA,W;AAAW,iBAAXA,WAAW,K;AAAA,oBAFV;;;;;;;;;;;;;;;;;ACPd;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;UAuBaM,U;;;;;cAAAA;;;;2BAAAA,U;AAAU,S;AAAA,kBAPZ,CACP,4DADO,EAEP,sEAFO,EAGP,0DAHO,EAIP,kEAJO,CAOY;;;;4HAAVA,U,EAAU;AAAA,yBAZnB,6EAYmB,EAXnB,yFAWmB,EAVnB,qEAUmB,EATnB,gFASmB;AATF,oBAGjB,4DAHiB,EAIjB,sEAJiB,EAKjB,0DALiB,EAMjB,kEANiB;AASE,S;AAHA,O","file":"exam-exam-module-es5.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { AddExamComponent } from './add-exam/add-exam.component';\nimport { ExamDetailsComponent } from './exam-details/exam-details.component';\nimport { ExamEditComponent } from './exam-edit/exam-edit.component';\nimport { ExamsComponent } from './exams/exams.component';\n\n // { path: ':id/exams/add-exam', component: AddExamComponent},\n    // { path: ':id/exams/:exam-id', component: ExamDetailsComponent},\n    // { path: ':id/exams', component: ExamsComponent },\n\n\nconst routes: Routes = [\n  {path: '', children: [\n    { path: 'add', component: AddExamComponent },\n    { path: ':exam-id/edit', component: ExamEditComponent },\n    { path: ':exam-id', component: ExamDetailsComponent },\n    { path: '', component: ExamsComponent, pathMatch: 'full' }\n  ]}\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class ExamRoutingModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { take } from 'rxjs/operators';\nimport { ExamService } from '../../services/exam.service';\n\n@Component({\n  selector: 'app-exam-edit',\n  templateUrl: './exam-edit.component.html',\n  styleUrls: ['./exam-edit.component.css']\n})\nexport class ExamEditComponent implements OnInit {\n\n  subjectId!: string | null;\n  examId!: string | null;\n  examEditForm = this.fb.group({\n    name: ['', [Validators.required]]\n  });\n\n  constructor(\n    private readonly fb: FormBuilder,\n    private readonly route: ActivatedRoute,\n    private readonly router: Router,\n    private readonly examService: ExamService\n  ) { \n    this.subjectId = this.route.snapshot.paramMap.get('subject-id');\n    this.examId = this.route.snapshot.paramMap.get('exam-id');\n  }\n\n  ngOnInit(): void {\n    this.examService.getExam(this.examId)\n    .pipe(take(1))\n    .subscribe((exam) => {\n      const { name } = exam;\n      this.examEditForm.patchValue({ name });\n    })\n  }\n\n  submit(): void {\n    if(this.examEditForm.invalid) {\n      return;\n    }\n\n    const { name } = this.examEditForm.value;\n\n    this.examService.editExam(this.examId, name)\n    .pipe(take(1))\n    .subscribe((data) => {\n      this.router.navigate([`/teacher/subjects/${this.subjectId}/exams`]);\n    });\n  }\n\n}\n","<div class=\"form-wrapper\">\n\n    <div class=\"center-form\">\n        <form [formGroup]=\"examEditForm\" (ngSubmit)=\"submit()\" class=\"form-box\">\n            <h1>Edit exam</h1>\n            <div id=\"inputs\">\n                <input formControlName=\"name\" type=\"text\" placeholder=\"Name\" class=\"blue-input\">\n            </div>\n\n            <button class=\"hover form-blue-button bottom-button\" type=\"submit\"\n                [disabled]=\"this.examEditForm.invalid\">Edit</button>\n        </form>\n    </div>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Observable, pipe } from 'rxjs';\nimport { take, tap } from 'rxjs/operators';\nimport { Exam, Question, Topic } from 'src/app/core/models';\nimport { ExamService } from '../../services/exam.service';\nimport { SubjectService } from '../../services/subject.service';\nimport { TopicService } from '../../services/topic.service';\n\n@Component({\n  selector: 'app-exam-details',\n  templateUrl: './exam-details.component.html',\n  styleUrls: ['./exam-details.component.css']\n})\nexport class ExamDetailsComponent implements OnInit {\n  public exam$!: Observable<Exam>;\n  public topics$!: Observable<Array<Topic>>;\n  public questions$!: Observable<Array<Question>>;\n  public examQuestions$!: Observable<Array<Question>>;\n  public examId: string | null;\n  public subjectId: string | null;\n\n  constructor\n    (\n      private readonly examService: ExamService,\n      private readonly subjectService: SubjectService,\n      private readonly topicService: TopicService,\n      private readonly route: ActivatedRoute\n    ) {\n    this.examId = this.route.snapshot.paramMap.get('exam-id');\n    this.subjectId = this.route.snapshot.paramMap.get('subject-id');\n  }\n\n  public ngOnInit(): void {\n    this.exam$ = this.examService.getExam(this.examId);\n    this.examQuestions$ = this.examService.getExamQuestions(this.examId);\n    this.topics$ = this.subjectService.getSubjectTopics(this.subjectId);\n  }\n\n  public selectTopic(topicId: string): void {\n    this.questions$ = this.topicService.getTopicQuestions(topicId);\n  }\n\n  public addQuestion(questionId: number): void {\n    this.examService.addQuestionToExam(this.examId, questionId)\n    .pipe(take(1))\n    .subscribe(() => {\n      this.examQuestions$ = this.examService.getExamQuestions(this.examId);\n    });\n  }\n\n  public removeQuestion(questionId: number): void {\n    this.examService.removeQuestionFromExam(this.examId, questionId)\n    .pipe(take(1))\n    .subscribe(() => {\n      this.examQuestions$ = this.examService.getExamQuestions(this.examId);\n    })\n  }\n\n}\n","<ng-container *ngIf=\"exam$ | async as exam\">\n    <div class=\"page-wrapper\">\n        <nav class=\"navbar\">\n            <div class=\"heading-nav\">\n                <h2 id=\"heading\"><b>{{exam.name | uppercase}}</b> - Exam</h2>\n            </div>\n        </nav>\n\n        <div class=\"half-flex-container\">\n\n            <div class=\"half-flex-item left\">\n                <h2 class=\"subheading\">Exam questions</h2>\n                <ng-container *ngIf=\"(examQuestions$ | async) as examQuestions;\">\n                    <ng-container *ngIf=\"examQuestions.length !== 0; else empty\">\n\n                        <ul class=\"exam-question-list\">\n                            <ng-container *ngFor=\"let examQuestion of examQuestions; let i = index;\">\n                                <ng-container\n                                    *ngIf=\"examQuestion.questionType.type === 'open'; else closedQuestionTemplate\">\n                                    <li class=\"exam-question\">\n                                        <div class=\"exam-question-title\">\n                                            <h2>{{i + 1}}. {{examQuestion.title}}</h2>\n                                            <button (click)=\"removeQuestion(examQuestion.id)\"\n                                                class=\"remove-btn\">Remove</button>\n                                        </div>\n                                        <h3>({{examQuestion.maxPoints}} Points)</h3>\n                                        <textarea placeholder=\"Open question\" class=\"exam-textarea\" disabled></textarea>\n                                    </li>\n                                </ng-container>\n\n                                <ng-template #closedQuestionTemplate>\n                                    <li class=\"exam-question\">\n                                        <div class=\"exam-question-title\">\n                                            <h2>{{i + 1}}. {{examQuestion.title}}</h2>\n                                            <button (click)=\"removeQuestion(examQuestion.id)\"\n                                                class=\"remove-btn\">Remove</button>\n                                        </div>\n                                        <h3>({{examQuestion.maxPoints}} Points)</h3>\n                                        <ul class=\"exam-choice-list\">\n                                            <li class=\"exam-choice\" *ngFor=\"let choice of examQuestion.choices\">\n                                                <p>{{choice.text}} <i>({{choice.isCorrect}})</i></p>\n                                            </li>\n                                        </ul>\n                                    </li>\n                                </ng-template>\n                            </ng-container>\n                        </ul>\n                    </ng-container>\n                </ng-container>\n\n                <ng-template #empty>\n                    <p id=\"empty\">No questions have been added to this exam yet.</p>\n                </ng-template>\n\n            </div>\n\n            <div class=\"half-flex-item right box-shadow\">\n                <h2 class=\"subheading\">Choose a topic</h2>\n\n                <select id=\"topic-select\" #select>\n                    <option *ngFor=\"let topic of topics$ | async\" value=\"{{topic.id}}\">\n                        {{topic.name}}\n                    </option>\n                </select>\n                <button (click)=\"selectTopic(select.value)\" class=\"blue-button\">Select</button>\n\n                <ng-container *ngIf=\"(questions$ | async) as questions;\">\n                    <ng-container *ngIf=\"questions.length !== 0;  else empty\">\n                        <ul class=\"question-list\">\n                            <li *ngFor=\"let question of questions\">\n                                <div class=\"exam-question-title\">\n                                    <p>{{question.title}}</p>\n                                    <button (click)=\"addQuestion(question.id)\" class=\"blue-button\">Add</button>\n                                </div>\n                            </li>\n                        </ul>\n                    </ng-container>\n                </ng-container>\n\n                <ng-template #empty>\n                    <p>This topic has no questions yet</p>\n                </ng-template>\n\n            </div>\n\n        </div>\n    </div>\n</ng-container>","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { switchMap, take } from 'rxjs/operators';\nimport { Exam, Subject } from 'src/app/core/models';\nimport { ExamService } from '../../services/exam.service';\nimport { SubjectService } from '../../services/subject.service';\n\n@Component({\n  selector: 'app-exams',\n  templateUrl: './exams.component.html',\n  styleUrls: ['./exams.component.css']\n})\nexport class ExamsComponent implements OnInit {\n  public subject$!: Observable<Subject>;\n  public exams$!: Observable<Array<Exam>>;\n  public refreshedExams$ = new BehaviorSubject<boolean>(true);\n  public subjectId: string | null;\n\n  constructor\n  (\n    private readonly subjectService: SubjectService,\n    private readonly route: ActivatedRoute,\n    private readonly examService: ExamService\n  ) { \n      this.subjectId = this.route.snapshot.paramMap.get('subject-id');\n  }\n\n  public ngOnInit(): void {\n    this.subject$ = this.subjectService.getSubject(this.subjectId);\n    this.exams$! = this.refreshedExams$.pipe(switchMap(_ => this.subjectService.getSubjectExams(this.subjectId)));\n  }\n\n  public refreshExams() {\n    this.refreshedExams$.next(true);\n  }\n  \n  public deleteExam(examId: number): void {\n    this.examService.deleteExam(examId)\n    .pipe(take(1))\n    .subscribe(() => {\n      this.refreshExams();\n    });\n  }\n  \n}\n","<ng-container *ngIf=\"subject$ | async as subject\">\n    <div class=\"page-wrapper\">\n\n\n        <nav class=\"navbar\">\n            <div class=\"heading-nav\">\n                <h2 id=\"heading\">{{subject.name | uppercase}}</h2>\n            </div>\n        </nav>\n\n        <main class=\"page\">\n            <h2>Exams</h2>\n\n            <div class=\"rectangle-flex-container\">\n\n                <div class=\"rectangle-flex-item hover box-shadow\" id=\"add-exam\" routerLink=\"add\">\n                    <div class=\"rectangle-content\">\n                        <h3>\n                            <i class=\"fas fa-plus\"></i>\n                        </h3>\n                    </div>\n                </div>\n\n                <div class=\"rectangle-flex-item hover box-shadow\" *ngFor=\"let exam of exams$ | async\"\n                    routerLink=\"{{exam.id}}\">\n                    <div class=\"rectangle-content\">\n                        <h3>\n                            {{exam.name}}\n                        </h3>\n                    </div>\n                    <div class=\"edit-strip\" routerLink=\"{{exam.id}}/edit\">\n                        <p>Edit</p>\n                    </div>\n                    <div class=\"delete-strip\" (click)=\"deleteExam(exam.id); $event.stopPropagation();\">\n                        <p>Delete</p>\n                    </div>\n                </div>\n\n            </div>\n        </main>\n    </div>\n</ng-container>","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { ExamService } from '../../services/exam.service';\nimport { SubjectService } from '../../services/subject.service';\n\n@Component({\n  selector: 'app-add-exam',\n  templateUrl: './add-exam.component.html',\n  styleUrls: ['./add-exam.component.css']\n})\nexport class AddExamComponent implements OnInit {\n\n  subjectId!: string | null;\n  subject$!: Observable<any>;\n  examForm = this.fb.group({\n    name: ['', [Validators.required]]\n  });\n\n  constructor(\n    private readonly fb: FormBuilder,\n    private readonly route: ActivatedRoute,\n    private readonly router: Router,\n    private readonly subjectService: SubjectService,\n    private readonly examService: ExamService\n  ) { \n    this.subjectId = this.route.snapshot.paramMap.get('subject-id');\n  }\n\n  ngOnInit(): void {\n    this.subject$ = this.subjectService.getSubject(this.subjectId);\n  }\n\n  submit(): void {\n    if(this.examForm.invalid) {\n      return;\n    }\n\n    const { name } = this.examForm.value;\n\n    this.examService.createExam(name, this.subjectId).subscribe(() => {\n      this.router.navigate([`/teacher/subjects/${this.subjectId}/exams`]);\n    });\n  }\n\n}\n","<ng-container *ngIf=\"subject$ | async as subject\">\n    <div class=\"form-wrapper\">\n\n        <div class=\"center-form\">\n            <form [formGroup]=\"examForm\" (ngSubmit)=\"submit()\" class=\"form-box\">\n                <h1>Create exam</h1>\n                <div id=\"inputs\">\n                    <input formControlName=\"name\" type=\"text\" placeholder=\"Name\" class=\"blue-input\">\n                </div>\n\n                <button class=\"hover form-blue-button bottom-button\" type=\"submit\" [disabled]=\"this.examForm.invalid\">Create</button>\n            </form>\n        </div>\n    </div>\n</ng-container>","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { AppSettings } from 'src/app/core/app-settings';\nimport { Exam, Question } from 'src/app/core/models';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ExamService {\n  private readonly baseUrl: string = `${AppSettings.API_ENDPOINT}/exams`;\n\n  constructor(private readonly http: HttpClient) { }\n\n  public createExam(name: string, subjectId: any): Observable<void> {\n    return this.http.post<void>(`${this.baseUrl}`, { name, subjectId });\n  }\n\n  public editExam(examId: any, name: string): Observable<void> {\n    return this.http.patch<void>(`${this.baseUrl}/${examId}`, { name });\n  }\n \n  public getExam(examId: any): Observable<Exam> {\n    return this.http.get<any>(`${this.baseUrl}/${examId}`);\n  }\n\n  public addQuestionToExam(examId: any, questionId: number): Observable<void> {\n    return this.http.post<void>(`${this.baseUrl}/add-question`, { examId, questionId });\n  }\n\n  public getExamQuestions(examId: any): Observable<Array<Question>> {\n    return this.http.get<Array<Question>>(`${this.baseUrl}/${examId}/questions`);\n  }\n\n  public removeQuestionFromExam(examId: any, questionId: number): Observable<void> {\n    return this.http.delete<void>(`${this.baseUrl}/${examId}/remove-question/${questionId}`);\n  }\n\n  public deleteExam(examId: any): Observable<void> {\n    return this.http.delete<void>(`${this.baseUrl}/${examId}`);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { AddExamComponent } from './add-exam/add-exam.component';\nimport { ExamDetailsComponent } from './exam-details/exam-details.component';\nimport { ExamsComponent } from './exams/exams.component';\n\nimport { ExamRoutingModule } from './exam-routing.module';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { ExamEditComponent } from './exam-edit/exam-edit.component';\n\n@NgModule({\n  declarations: [\n    AddExamComponent,\n    ExamDetailsComponent,\n    ExamsComponent,\n    ExamEditComponent\n  ],\n  imports: [\n    CommonModule,\n    ExamRoutingModule,\n    FormsModule,\n    ReactiveFormsModule,\n  ]\n})\nexport class ExamModule { }\n"]}